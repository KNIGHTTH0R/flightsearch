<?php
/**
 * AffiliateSearchResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AffiliateSearchResult Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AffiliateSearchResult implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AffiliateSearchResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'outbound' => '\Swagger\Client\Model\FlightSearchBound',
        'inbound' => '\Swagger\Client\Model\FlightSearchBound',
        'fare' => '\Swagger\Client\Model\AffiliateFlightSearchPrice',
        'payout' => '\Swagger\Client\Model\AffiliatePayout',
        'airline' => 'string',
        'deep_link' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'outbound' => null,
        'inbound' => null,
        'fare' => null,
        'payout' => null,
        'airline' => null,
        'deep_link' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'outbound' => 'outbound',
        'inbound' => 'inbound',
        'fare' => 'fare',
        'payout' => 'payout',
        'airline' => 'airline',
        'deep_link' => 'deep_link'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'outbound' => 'setOutbound',
        'inbound' => 'setInbound',
        'fare' => 'setFare',
        'payout' => 'setPayout',
        'airline' => 'setAirline',
        'deep_link' => 'setDeepLink'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'outbound' => 'getOutbound',
        'inbound' => 'getInbound',
        'fare' => 'getFare',
        'payout' => 'getPayout',
        'airline' => 'getAirline',
        'deep_link' => 'getDeepLink'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['outbound'] = isset($data['outbound']) ? $data['outbound'] : null;
        $this->container['inbound'] = isset($data['inbound']) ? $data['inbound'] : null;
        $this->container['fare'] = isset($data['fare']) ? $data['fare'] : null;
        $this->container['payout'] = isset($data['payout']) ? $data['payout'] : null;
        $this->container['airline'] = isset($data['airline']) ? $data['airline'] : null;
        $this->container['deep_link'] = isset($data['deep_link']) ? $data['deep_link'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['outbound'] === null) {
            $invalid_properties[] = "'outbound' can't be null";
        }
        if ($this->container['fare'] === null) {
            $invalid_properties[] = "'fare' can't be null";
        }
        if ($this->container['payout'] === null) {
            $invalid_properties[] = "'payout' can't be null";
        }
        if ($this->container['airline'] === null) {
            $invalid_properties[] = "'airline' can't be null";
        }
        if ($this->container['deep_link'] === null) {
            $invalid_properties[] = "'deep_link' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['outbound'] === null) {
            return false;
        }
        if ($this->container['fare'] === null) {
            return false;
        }
        if ($this->container['payout'] === null) {
            return false;
        }
        if ($this->container['airline'] === null) {
            return false;
        }
        if ($this->container['deep_link'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets outbound
     * @return \Swagger\Client\Model\FlightSearchBound
     */
    public function getOutbound()
    {
        return $this->container['outbound'];
    }

    /**
     * Sets outbound
     * @param \Swagger\Client\Model\FlightSearchBound $outbound The flight from the origin to the destination
     * @return $this
     */
    public function setOutbound($outbound)
    {
        $this->container['outbound'] = $outbound;

        return $this;
    }

    /**
     * Gets inbound
     * @return \Swagger\Client\Model\FlightSearchBound
     */
    public function getInbound()
    {
        return $this->container['inbound'];
    }

    /**
     * Sets inbound
     * @param \Swagger\Client\Model\FlightSearchBound $inbound The return flight from the destination to the origin
     * @return $this
     */
    public function setInbound($inbound)
    {
        $this->container['inbound'] = $inbound;

        return $this;
    }

    /**
     * Gets fare
     * @return \Swagger\Client\Model\AffiliateFlightSearchPrice
     */
    public function getFare()
    {
        return $this->container['fare'];
    }

    /**
     * Sets fare
     * @param \Swagger\Client\Model\AffiliateFlightSearchPrice $fare The price and fare information which applies to all itineraries in this response
     * @return $this
     */
    public function setFare($fare)
    {
        $this->container['fare'] = $fare;

        return $this;
    }

    /**
     * Gets payout
     * @return \Swagger\Client\Model\AffiliatePayout
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     * @param \Swagger\Client\Model\AffiliatePayout $payout Details of the amount of payout that the affiliate will received per click or if this flight is sold
     * @return $this
     */
    public function setPayout($payout)
    {
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets airline
     * @return string
     */
    public function getAirline()
    {
        return $this->container['airline'];
    }

    /**
     * Sets airline
     * @param string $airline The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is selling this result
     * @return $this
     */
    public function setAirline($airline)
    {
        $this->container['airline'] = $airline;

        return $this;
    }

    /**
     * Gets deep_link
     * @return string
     */
    public function getDeepLink()
    {
        return $this->container['deep_link'];
    }

    /**
     * Sets deep_link
     * @param string $deep_link A link to the page from which this result can be purchased from the affiliate
     * @return $this
     */
    public function setDeepLink($deep_link)
    {
        $this->container['deep_link'] = $deep_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


