<?php
/**
 * AffiliateFlightSearchPrice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AffiliateFlightSearchPrice Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AffiliateFlightSearchPrice implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AffiliateFlightSearchPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => 'string',
        'total_price' => 'string',
        'price_per_adult' => '\Swagger\Client\Model\Fare',
        'price_per_child' => '\Swagger\Client\Model\Fare',
        'price_per_infant' => '\Swagger\Client\Model\Fare',
        'restrictions' => '\Swagger\Client\Model\FareRestrictions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
        'total_price' => null,
        'price_per_adult' => null,
        'price_per_child' => null,
        'price_per_infant' => null,
        'restrictions' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'total_price' => 'total_price',
        'price_per_adult' => 'price_per_adult',
        'price_per_child' => 'price_per_child',
        'price_per_infant' => 'price_per_infant',
        'restrictions' => 'restrictions'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'total_price' => 'setTotalPrice',
        'price_per_adult' => 'setPricePerAdult',
        'price_per_child' => 'setPricePerChild',
        'price_per_infant' => 'setPricePerInfant',
        'restrictions' => 'setRestrictions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'total_price' => 'getTotalPrice',
        'price_per_adult' => 'getPricePerAdult',
        'price_per_child' => 'getPricePerChild',
        'price_per_infant' => 'getPricePerInfant',
        'restrictions' => 'getRestrictions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['price_per_adult'] = isset($data['price_per_adult']) ? $data['price_per_adult'] : null;
        $this->container['price_per_child'] = isset($data['price_per_child']) ? $data['price_per_child'] : null;
        $this->container['price_per_infant'] = isset($data['price_per_infant']) ? $data['price_per_infant'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalid_properties[] = "'total_price' can't be null";
        }
        if ($this->container['price_per_adult'] === null) {
            $invalid_properties[] = "'price_per_adult' can't be null";
        }
        if ($this->container['restrictions'] === null) {
            $invalid_properties[] = "'restrictions' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['currency'] === null) {
            return false;
        }
        if ($this->container['total_price'] === null) {
            return false;
        }
        if ($this->container['price_per_adult'] === null) {
            return false;
        }
        if ($this->container['restrictions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency The <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">currency</a> code applicable to this fare
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_price
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param string $total_price The total price for all the requested passengers for this flight
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets price_per_adult
     * @return \Swagger\Client\Model\Fare
     */
    public function getPricePerAdult()
    {
        return $this->container['price_per_adult'];
    }

    /**
     * Sets price_per_adult
     * @param \Swagger\Client\Model\Fare $price_per_adult The per-passenger fare for each adult on this flight
     * @return $this
     */
    public function setPricePerAdult($price_per_adult)
    {
        $this->container['price_per_adult'] = $price_per_adult;

        return $this;
    }

    /**
     * Gets price_per_child
     * @return \Swagger\Client\Model\Fare
     */
    public function getPricePerChild()
    {
        return $this->container['price_per_child'];
    }

    /**
     * Sets price_per_child
     * @param \Swagger\Client\Model\Fare $price_per_child The per-passenger fare for each child on this flight
     * @return $this
     */
    public function setPricePerChild($price_per_child)
    {
        $this->container['price_per_child'] = $price_per_child;

        return $this;
    }

    /**
     * Gets price_per_infant
     * @return \Swagger\Client\Model\Fare
     */
    public function getPricePerInfant()
    {
        return $this->container['price_per_infant'];
    }

    /**
     * Sets price_per_infant
     * @param \Swagger\Client\Model\Fare $price_per_infant The per-passenger fare for each infant on this flight
     * @return $this
     */
    public function setPricePerInfant($price_per_infant)
    {
        $this->container['price_per_infant'] = $price_per_infant;

        return $this;
    }

    /**
     * Gets restrictions
     * @return \Swagger\Client\Model\FareRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     * @param \Swagger\Client\Model\FareRestrictions $restrictions The restrictions associated with this fare
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


