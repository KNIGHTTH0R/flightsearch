<?php
/**
 * FlightReservationSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FlightReservationSegment Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FlightReservationSegment implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FlightReservationSegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'departs_at' => 'string',
        'arrives_at' => 'string',
        'origin' => '\Swagger\Client\Model\Airport',
        'destination' => '\Swagger\Client\Model\Airport',
        'marketing_airline' => 'string',
        'operating_airline' => 'string',
        'flight_number' => 'string',
        'traveler_ids' => 'string[]',
        'booking_info' => '\Swagger\Client\Model\FlightReservationBookingInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'departs_at' => null,
        'arrives_at' => null,
        'origin' => null,
        'destination' => null,
        'marketing_airline' => null,
        'operating_airline' => null,
        'flight_number' => null,
        'traveler_ids' => null,
        'booking_info' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'departs_at' => 'departs_at',
        'arrives_at' => 'arrives_at',
        'origin' => 'origin',
        'destination' => 'destination',
        'marketing_airline' => 'marketing_airline',
        'operating_airline' => 'operating_airline',
        'flight_number' => 'flight_number',
        'traveler_ids' => 'traveler_ids',
        'booking_info' => 'booking_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'departs_at' => 'setDepartsAt',
        'arrives_at' => 'setArrivesAt',
        'origin' => 'setOrigin',
        'destination' => 'setDestination',
        'marketing_airline' => 'setMarketingAirline',
        'operating_airline' => 'setOperatingAirline',
        'flight_number' => 'setFlightNumber',
        'traveler_ids' => 'setTravelerIds',
        'booking_info' => 'setBookingInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'departs_at' => 'getDepartsAt',
        'arrives_at' => 'getArrivesAt',
        'origin' => 'getOrigin',
        'destination' => 'getDestination',
        'marketing_airline' => 'getMarketingAirline',
        'operating_airline' => 'getOperatingAirline',
        'flight_number' => 'getFlightNumber',
        'traveler_ids' => 'getTravelerIds',
        'booking_info' => 'getBookingInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['departs_at'] = isset($data['departs_at']) ? $data['departs_at'] : null;
        $this->container['arrives_at'] = isset($data['arrives_at']) ? $data['arrives_at'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['marketing_airline'] = isset($data['marketing_airline']) ? $data['marketing_airline'] : null;
        $this->container['operating_airline'] = isset($data['operating_airline']) ? $data['operating_airline'] : null;
        $this->container['flight_number'] = isset($data['flight_number']) ? $data['flight_number'] : null;
        $this->container['traveler_ids'] = isset($data['traveler_ids']) ? $data['traveler_ids'] : null;
        $this->container['booking_info'] = isset($data['booking_info']) ? $data['booking_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['departs_at'] === null) {
            $invalid_properties[] = "'departs_at' can't be null";
        }
        if ($this->container['arrives_at'] === null) {
            $invalid_properties[] = "'arrives_at' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalid_properties[] = "'origin' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalid_properties[] = "'destination' can't be null";
        }
        if ($this->container['marketing_airline'] === null) {
            $invalid_properties[] = "'marketing_airline' can't be null";
        }
        if ($this->container['operating_airline'] === null) {
            $invalid_properties[] = "'operating_airline' can't be null";
        }
        if ($this->container['flight_number'] === null) {
            $invalid_properties[] = "'flight_number' can't be null";
        }
        if ($this->container['traveler_ids'] === null) {
            $invalid_properties[] = "'traveler_ids' can't be null";
        }
        if ($this->container['booking_info'] === null) {
            $invalid_properties[] = "'booking_info' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['departs_at'] === null) {
            return false;
        }
        if ($this->container['arrives_at'] === null) {
            return false;
        }
        if ($this->container['origin'] === null) {
            return false;
        }
        if ($this->container['destination'] === null) {
            return false;
        }
        if ($this->container['marketing_airline'] === null) {
            return false;
        }
        if ($this->container['operating_airline'] === null) {
            return false;
        }
        if ($this->container['flight_number'] === null) {
            return false;
        }
        if ($this->container['traveler_ids'] === null) {
            return false;
        }
        if ($this->container['booking_info'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Uniquely identifies this flight in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets departs_at
     * @return string
     */
    public function getDepartsAt()
    {
        return $this->container['departs_at'];
    }

    /**
     * Sets departs_at
     * @param string $departs_at Date and time of departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the origin airport
     * @return $this
     */
    public function setDepartsAt($departs_at)
    {
        $this->container['departs_at'] = $departs_at;

        return $this;
    }

    /**
     * Gets arrives_at
     * @return string
     */
    public function getArrivesAt()
    {
        return $this->container['arrives_at'];
    }

    /**
     * Sets arrives_at
     * @param string $arrives_at Date and time of departure at the destination, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the destination airport
     * @return $this
     */
    public function setArrivesAt($arrives_at)
    {
        $this->container['arrives_at'] = $arrives_at;

        return $this;
    }

    /**
     * Gets origin
     * @return \Swagger\Client\Model\Airport
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     * @param \Swagger\Client\Model\Airport $origin Information on the origin airport, from which this flight departs
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets destination
     * @return \Swagger\Client\Model\Airport
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     * @param \Swagger\Client\Model\Airport $destination Information on the destination airport, at which this flight arrives
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets marketing_airline
     * @return string
     */
    public function getMarketingAirline()
    {
        return $this->container['marketing_airline'];
    }

    /**
     * Sets marketing_airline
     * @param string $marketing_airline The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is responsible for the traveller this flight
     * @return $this
     */
    public function setMarketingAirline($marketing_airline)
    {
        $this->container['marketing_airline'] = $marketing_airline;

        return $this;
    }

    /**
     * Gets operating_airline
     * @return string
     */
    public function getOperatingAirline()
    {
        return $this->container['operating_airline'];
    }

    /**
     * Sets operating_airline
     * @param string $operating_airline The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.
     * @return $this
     */
    public function setOperatingAirline($operating_airline)
    {
        $this->container['operating_airline'] = $operating_airline;

        return $this;
    }

    /**
     * Gets flight_number
     * @return string
     */
    public function getFlightNumber()
    {
        return $this->container['flight_number'];
    }

    /**
     * Sets flight_number
     * @param string $flight_number The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft's flight
     * @return $this
     */
    public function setFlightNumber($flight_number)
    {
        $this->container['flight_number'] = $flight_number;

        return $this;
    }

    /**
     * Gets traveler_ids
     * @return string[]
     */
    public function getTravelerIds()
    {
        return $this->container['traveler_ids'];
    }

    /**
     * Sets traveler_ids
     * @param string[] $traveler_ids Traveler identifiers to indicate the travelers to whom this ticket applies.
     * @return $this
     */
    public function setTravelerIds($traveler_ids)
    {
        $this->container['traveler_ids'] = $traveler_ids;

        return $this;
    }

    /**
     * Gets booking_info
     * @return \Swagger\Client\Model\FlightReservationBookingInfo
     */
    public function getBookingInfo()
    {
        return $this->container['booking_info'];
    }

    /**
     * Sets booking_info
     * @param \Swagger\Client\Model\FlightReservationBookingInfo $booking_info A booking information object with additional details about how the quality of this flight at the given price.
     * @return $this
     */
    public function setBookingInfo($booking_info)
    {
        $this->container['booking_info'] = $booking_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


