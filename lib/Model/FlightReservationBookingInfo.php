<?php
/**
 * FlightReservationBookingInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FlightReservationBookingInfo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FlightReservationBookingInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FlightReservationBookingInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'travel_class' => 'string',
        'booking_code' => 'string',
        'airline_record_locator' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'travel_class' => null,
        'booking_code' => null,
        'airline_record_locator' => null,
        'status' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'travel_class' => 'travel_class',
        'booking_code' => 'booking_code',
        'airline_record_locator' => 'airline_record_locator',
        'status' => 'status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'travel_class' => 'setTravelClass',
        'booking_code' => 'setBookingCode',
        'airline_record_locator' => 'setAirlineRecordLocator',
        'status' => 'setStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'travel_class' => 'getTravelClass',
        'booking_code' => 'getBookingCode',
        'airline_record_locator' => 'getAirlineRecordLocator',
        'status' => 'getStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['travel_class'] = isset($data['travel_class']) ? $data['travel_class'] : null;
        $this->container['booking_code'] = isset($data['booking_code']) ? $data['booking_code'] : null;
        $this->container['airline_record_locator'] = isset($data['airline_record_locator']) ? $data['airline_record_locator'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['travel_class'] === null) {
            $invalid_properties[] = "'travel_class' can't be null";
        }
        if ($this->container['booking_code'] === null) {
            $invalid_properties[] = "'booking_code' can't be null";
        }
        if ($this->container['airline_record_locator'] === null) {
            $invalid_properties[] = "'airline_record_locator' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['travel_class'] === null) {
            return false;
        }
        if ($this->container['booking_code'] === null) {
            return false;
        }
        if ($this->container['airline_record_locator'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets travel_class
     * @return string
     */
    public function getTravelClass()
    {
        return $this->container['travel_class'];
    }

    /**
     * Sets travel_class
     * @param string $travel_class The cabin class offered on this flight. An enumeration that will read either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST
     * @return $this
     */
    public function setTravelClass($travel_class)
    {
        $this->container['travel_class'] = $travel_class;

        return $this;
    }

    /**
     * Gets booking_code
     * @return string
     */
    public function getBookingCode()
    {
        return $this->container['booking_code'];
    }

    /**
     * Sets booking_code
     * @param string $booking_code The Reservation Booking Designator code that determines the quality and terms of the flight offered for the given price. A single letter from A..Z
     * @return $this
     */
    public function setBookingCode($booking_code)
    {
        $this->container['booking_code'] = $booking_code;

        return $this;
    }

    /**
     * Gets airline_record_locator
     * @return string
     */
    public function getAirlineRecordLocator()
    {
        return $this->container['airline_record_locator'];
    }

    /**
     * Sets airline_record_locator
     * @param string $airline_record_locator 6 character identifier of this travel record on the airline's system. May be the same as the global record locator.
     * @return $this
     */
    public function setAirlineRecordLocator($airline_record_locator)
    {
        $this->container['airline_record_locator'] = $airline_record_locator;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status An enumeration to represent the reservation status for this seat on this flight. For example&colon; CONFIRMED, CANCELLED, RESCHEDULED, FLIGHT_CANCELLED, WAITLISTED.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


