<?php
/**
 * VehicleInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VehicleInfo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VehicleInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VehicleInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acriss_code' => 'string',
        'category' => 'string',
        'type' => 'string',
        'transmission' => 'string',
        'air_conditioning' => 'bool',
        'fuel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acriss_code' => null,
        'category' => null,
        'type' => null,
        'transmission' => null,
        'air_conditioning' => null,
        'fuel' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'acriss_code' => 'acriss_code',
        'category' => 'category',
        'type' => 'type',
        'transmission' => 'transmission',
        'air_conditioning' => 'air_conditioning',
        'fuel' => 'fuel'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'acriss_code' => 'setAcrissCode',
        'category' => 'setCategory',
        'type' => 'setType',
        'transmission' => 'setTransmission',
        'air_conditioning' => 'setAirConditioning',
        'fuel' => 'setFuel'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'acriss_code' => 'getAcrissCode',
        'category' => 'getCategory',
        'type' => 'getType',
        'transmission' => 'getTransmission',
        'air_conditioning' => 'getAirConditioning',
        'fuel' => 'getFuel'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acriss_code'] = isset($data['acriss_code']) ? $data['acriss_code'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['transmission'] = isset($data['transmission']) ? $data['transmission'] : null;
        $this->container['air_conditioning'] = isset($data['air_conditioning']) ? $data['air_conditioning'] : null;
        $this->container['fuel'] = isset($data['fuel']) ? $data['fuel'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['acriss_code'] === null) {
            $invalid_properties[] = "'acriss_code' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['acriss_code'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets acriss_code
     * @return string
     */
    public function getAcrissCode()
    {
        return $this->container['acriss_code'];
    }

    /**
     * Sets acriss_code
     * @param string $acriss_code The 4 letter <a href=\"http://en.wikipedia.org/wiki/ACRISS_Car_Classification_Code\">ACRISS code</a> that defines the properties of vehicle being rented.
     * @return $this
     */
    public function setAcrissCode($acriss_code)
    {
        $this->container['acriss_code'] = $acriss_code;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category The decoded ACRISS vehicle category (For example&colon; Economy, Luxury, Standard).
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The decoded ACRISS vehicle type, to let you know what kind of vehicle this is (For example&colon; Van, SUV, Pickup).
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets transmission
     * @return string
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     * @param string $transmission The decoded ACRISS transmission type, to let you know if this vehicle is Automatic or Manual Transmission (stick-shift).
     * @return $this
     */
    public function setTransmission($transmission)
    {
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets air_conditioning
     * @return bool
     */
    public function getAirConditioning()
    {
        return $this->container['air_conditioning'];
    }

    /**
     * Sets air_conditioning
     * @param bool $air_conditioning The decoded ACRISS air_conditioning information, to let you know if this vehicle has air conditioning
     * @return $this
     */
    public function setAirConditioning($air_conditioning)
    {
        $this->container['air_conditioning'] = $air_conditioning;

        return $this;
    }

    /**
     * Gets fuel
     * @return string
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     * @param string $fuel The decoded ACRISS fuel type, to let you know if this vehicle is hybrid, electric, etc.
     * @return $this
     */
    public function setFuel($fuel)
    {
        $this->container['fuel'] = $fuel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


