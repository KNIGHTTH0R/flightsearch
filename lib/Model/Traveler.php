<?php
/**
 * Traveler
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Traveler Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Traveler implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Traveler';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'traveler_type' => 'string',
        'infant' => '\Swagger\Client\Model\Infant',
        'date_of_birth' => '\DateTime',
        'contacts' => '\Swagger\Client\Model\Contact[]',
        'frequent_traveler_cards' => '\Swagger\Client\Model\FrequentTravelerCard[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'last_name' => null,
        'first_name' => null,
        'traveler_type' => null,
        'infant' => null,
        'date_of_birth' => 'date',
        'contacts' => null,
        'frequent_traveler_cards' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'last_name' => 'last_name',
        'first_name' => 'first_name',
        'traveler_type' => 'traveler_type',
        'infant' => 'infant',
        'date_of_birth' => 'date_of_birth',
        'contacts' => 'contacts',
        'frequent_traveler_cards' => 'frequent_traveler_cards'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'traveler_type' => 'setTravelerType',
        'infant' => 'setInfant',
        'date_of_birth' => 'setDateOfBirth',
        'contacts' => 'setContacts',
        'frequent_traveler_cards' => 'setFrequentTravelerCards'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'traveler_type' => 'getTravelerType',
        'infant' => 'getInfant',
        'date_of_birth' => 'getDateOfBirth',
        'contacts' => 'getContacts',
        'frequent_traveler_cards' => 'getFrequentTravelerCards'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['traveler_type'] = isset($data['traveler_type']) ? $data['traveler_type'] : null;
        $this->container['infant'] = isset($data['infant']) ? $data['infant'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['frequent_traveler_cards'] = isset($data['frequent_traveler_cards']) ? $data['frequent_traveler_cards'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalid_properties[] = "'first_name' can't be null";
        }
        if ($this->container['traveler_type'] === null) {
            $invalid_properties[] = "'traveler_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if ($this->container['first_name'] === null) {
            return false;
        }
        if ($this->container['traveler_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Uniquely identifies this traveler in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name The last name of the passenger, as entered by the agent, in upper-case. May include suffixes. For example&colon; THACKSTON, KING III, LU.
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name The first name of the passenger, as entered by the agent, in upper-case. May include middle names, initials or prefixes. The total combined length of the first name and last name must be between 2 and 57 characters. For example&colon; ALEXANDRA, JOSE-ANTONIO MR, ELAINE T DR.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets traveler_type
     * @return string
     */
    public function getTravelerType()
    {
        return $this->container['traveler_type'];
    }

    /**
     * Sets traveler_type
     * @param string $traveler_type Enumeration of the type of traveler. May be ADULT or CHILD.
     * @return $this
     */
    public function setTravelerType($traveler_type)
    {
        $this->container['traveler_type'] = $traveler_type;

        return $this;
    }

    /**
     * Gets infant
     * @return \Swagger\Client\Model\Infant
     */
    public function getInfant()
    {
        return $this->container['infant'];
    }

    /**
     * Sets infant
     * @param \Swagger\Client\Model\Infant $infant Details on any infant that may be sharing this seat with this traveler. Absence of this key indicates that no infant is traveling with this passenger. An empty object at this key indicated an anonymous infant is traveling with the passenger.
     * @return $this
     */
    public function setInfant($infant)
    {
        $this->container['infant'] = $infant;

        return $this;
    }

    /**
     * Gets date_of_birth
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     * @param \DateTime $date_of_birth An <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date indicating the birth date of the traveler, as provided by the agent. For example&colon; 1972-02-19.
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets contacts
     * @return \Swagger\Client\Model\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     * @param \Swagger\Client\Model\Contact[] $contacts Details on how to contact this traveler. At least one traveler in a travel-record will have a contact element.
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets frequent_traveler_cards
     * @return \Swagger\Client\Model\FrequentTravelerCard[]
     */
    public function getFrequentTravelerCards()
    {
        return $this->container['frequent_traveler_cards'];
    }

    /**
     * Sets frequent_traveler_cards
     * @param \Swagger\Client\Model\FrequentTravelerCard[] $frequent_traveler_cards Information regarding loyalty cards that the traveler would like to use to accrue benefits as part of this travel record. Where possible, the system will attempt to validate that the frequent traveler card is eligible for use in the context of this travel record.
     * @return $this
     */
    public function setFrequentTravelerCards($frequent_traveler_cards)
    {
        $this->container['frequent_traveler_cards'] = $frequent_traveler_cards;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


