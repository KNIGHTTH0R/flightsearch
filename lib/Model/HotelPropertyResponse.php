<?php
/**
 * HotelPropertyResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * HotelPropertyResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HotelPropertyResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HotelPropertyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_code' => 'string',
        'property_name' => 'string',
        'location' => '\Swagger\Client\Model\Geolocation',
        'address' => '\Swagger\Client\Model\Address',
        'total_price' => '\Swagger\Client\Model\Amount',
        'min_daily_rate' => '\Swagger\Client\Model\Amount',
        'contacts' => '\Swagger\Client\Model\Contact[]',
        'amenities' => '\Swagger\Client\Model\Amenity[]',
        'awards' => '\Swagger\Client\Model\Award[]',
        'images' => '\Swagger\Client\Model\Image[]',
        'rooms' => '\Swagger\Client\Model\HotelRoom[]',
        'more_rooms_at_this_hotel' => '\Swagger\Client\Model\Link'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_code' => null,
        'property_name' => null,
        'location' => null,
        'address' => null,
        'total_price' => null,
        'min_daily_rate' => null,
        'contacts' => null,
        'amenities' => null,
        'awards' => null,
        'images' => null,
        'rooms' => null,
        'more_rooms_at_this_hotel' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'property_code' => 'property_code',
        'property_name' => 'property_name',
        'location' => 'location',
        'address' => 'address',
        'total_price' => 'total_price',
        'min_daily_rate' => 'min_daily_rate',
        'contacts' => 'contacts',
        'amenities' => 'amenities',
        'awards' => 'awards',
        'images' => 'images',
        'rooms' => 'rooms',
        'more_rooms_at_this_hotel' => 'more_rooms_at_this_hotel'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'property_code' => 'setPropertyCode',
        'property_name' => 'setPropertyName',
        'location' => 'setLocation',
        'address' => 'setAddress',
        'total_price' => 'setTotalPrice',
        'min_daily_rate' => 'setMinDailyRate',
        'contacts' => 'setContacts',
        'amenities' => 'setAmenities',
        'awards' => 'setAwards',
        'images' => 'setImages',
        'rooms' => 'setRooms',
        'more_rooms_at_this_hotel' => 'setMoreRoomsAtThisHotel'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'property_code' => 'getPropertyCode',
        'property_name' => 'getPropertyName',
        'location' => 'getLocation',
        'address' => 'getAddress',
        'total_price' => 'getTotalPrice',
        'min_daily_rate' => 'getMinDailyRate',
        'contacts' => 'getContacts',
        'amenities' => 'getAmenities',
        'awards' => 'getAwards',
        'images' => 'getImages',
        'rooms' => 'getRooms',
        'more_rooms_at_this_hotel' => 'getMoreRoomsAtThisHotel'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_code'] = isset($data['property_code']) ? $data['property_code'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['min_daily_rate'] = isset($data['min_daily_rate']) ? $data['min_daily_rate'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['amenities'] = isset($data['amenities']) ? $data['amenities'] : null;
        $this->container['awards'] = isset($data['awards']) ? $data['awards'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['rooms'] = isset($data['rooms']) ? $data['rooms'] : null;
        $this->container['more_rooms_at_this_hotel'] = isset($data['more_rooms_at_this_hotel']) ? $data['more_rooms_at_this_hotel'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['property_code'] === null) {
            $invalid_properties[] = "'property_code' can't be null";
        }
        if ($this->container['property_name'] === null) {
            $invalid_properties[] = "'property_name' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalid_properties[] = "'location' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalid_properties[] = "'total_price' can't be null";
        }
        if ($this->container['min_daily_rate'] === null) {
            $invalid_properties[] = "'min_daily_rate' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['property_code'] === null) {
            return false;
        }
        if ($this->container['property_name'] === null) {
            return false;
        }
        if ($this->container['location'] === null) {
            return false;
        }
        if ($this->container['total_price'] === null) {
            return false;
        }
        if ($this->container['min_daily_rate'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets property_code
     * @return string
     */
    public function getPropertyCode()
    {
        return $this->container['property_code'];
    }

    /**
     * Sets property_code
     * @param string $property_code The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.
     * @return $this
     */
    public function setPropertyCode($property_code)
    {
        $this->container['property_code'] = $property_code;

        return $this;
    }

    /**
     * Gets property_name
     * @return string
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     * @param string $property_name The name of this hotel.
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets location
     * @return \Swagger\Client\Model\Geolocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param \Swagger\Client\Model\Geolocation $location
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets address
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \Swagger\Client\Model\Address $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets total_price
     * @return \Swagger\Client\Model\Amount
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param \Swagger\Client\Model\Amount $total_price The lowest price of a stay, from the given check in date to the given check out date.
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets min_daily_rate
     * @return \Swagger\Client\Model\Amount
     */
    public function getMinDailyRate()
    {
        return $this->container['min_daily_rate'];
    }

    /**
     * Sets min_daily_rate
     * @param \Swagger\Client\Model\Amount $min_daily_rate The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate.
     * @return $this
     */
    public function setMinDailyRate($min_daily_rate)
    {
        $this->container['min_daily_rate'] = $min_daily_rate;

        return $this;
    }

    /**
     * Gets contacts
     * @return \Swagger\Client\Model\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     * @param \Swagger\Client\Model\Contact[] $contacts An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets amenities
     * @return \Swagger\Client\Model\Amenity[]
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     * @param \Swagger\Client\Model\Amenity[] $amenities An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search!
     * @return $this
     */
    public function setAmenities($amenities)
    {
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets awards
     * @return \Swagger\Client\Model\Award[]
     */
    public function getAwards()
    {
        return $this->container['awards'];
    }

    /**
     * Sets awards
     * @param \Swagger\Client\Model\Award[] $awards An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn't tell us about them!
     * @return $this
     */
    public function setAwards($awards)
    {
        $this->container['awards'] = $awards;

        return $this;
    }

    /**
     * Gets images
     * @return \Swagger\Client\Model\Image[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     * @param \Swagger\Client\Model\Image[] $images A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only.
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets rooms
     * @return \Swagger\Client\Model\HotelRoom[]
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     * @param \Swagger\Client\Model\HotelRoom[] $rooms Information on currently available rooms at this hotel.
     * @return $this
     */
    public function setRooms($rooms)
    {
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets more_rooms_at_this_hotel
     * @return \Swagger\Client\Model\Link
     */
    public function getMoreRoomsAtThisHotel()
    {
        return $this->container['more_rooms_at_this_hotel'];
    }

    /**
     * Sets more_rooms_at_this_hotel
     * @param \Swagger\Client\Model\Link $more_rooms_at_this_hotel Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel
     * @return $this
     */
    public function setMoreRoomsAtThisHotel($more_rooms_at_this_hotel)
    {
        $this->container['more_rooms_at_this_hotel'] = $more_rooms_at_this_hotel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


