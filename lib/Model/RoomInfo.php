<?php
/**
 * RoomInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RoomInfo Class Doc Comment
 *
 * @category    Class
 * @description More detailed structured information about the room.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoomInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RoomInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bed_type' => 'string',
        'number_of_beds' => 'string',
        'room_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bed_type' => null,
        'number_of_beds' => null,
        'room_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bed_type' => 'bed_type',
        'number_of_beds' => 'number_of_beds',
        'room_type' => 'room_type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bed_type' => 'setBedType',
        'number_of_beds' => 'setNumberOfBeds',
        'room_type' => 'setRoomType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bed_type' => 'getBedType',
        'number_of_beds' => 'getNumberOfBeds',
        'room_type' => 'getRoomType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bed_type'] = isset($data['bed_type']) ? $data['bed_type'] : null;
        $this->container['number_of_beds'] = isset($data['number_of_beds']) ? $data['number_of_beds'] : null;
        $this->container['room_type'] = isset($data['room_type']) ? $data['room_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['bed_type'] === null) {
            $invalid_properties[] = "'bed_type' can't be null";
        }
        if ($this->container['number_of_beds'] === null) {
            $invalid_properties[] = "'number_of_beds' can't be null";
        }
        if ($this->container['room_type'] === null) {
            $invalid_properties[] = "'room_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['bed_type'] === null) {
            return false;
        }
        if ($this->container['number_of_beds'] === null) {
            return false;
        }
        if ($this->container['room_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bed_type
     * @return string
     */
    public function getBedType()
    {
        return $this->container['bed_type'];
    }

    /**
     * Sets bed_type
     * @param string $bed_type The type of bed or beds in the room, such as Double, or King.
     * @return $this
     */
    public function setBedType($bed_type)
    {
        $this->container['bed_type'] = $bed_type;

        return $this;
    }

    /**
     * Gets number_of_beds
     * @return string
     */
    public function getNumberOfBeds()
    {
        return $this->container['number_of_beds'];
    }

    /**
     * Sets number_of_beds
     * @param string $number_of_beds The number of beds in the room. May be an integer or a free-text dessciption, as provided by the hotel
     * @return $this
     */
    public function setNumberOfBeds($number_of_beds)
    {
        $this->container['number_of_beds'] = $number_of_beds;

        return $this;
    }

    /**
     * Gets room_type
     * @return string
     */
    public function getRoomType()
    {
        return $this->container['room_type'];
    }

    /**
     * Sets room_type
     * @param string $room_type Free-text indicating the type of room - such Smoking, No Smoking, Suite, etc..
     * @return $this
     */
    public function setRoomType($room_type)
    {
        $this->container['room_type'] = $room_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


