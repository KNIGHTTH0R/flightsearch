<?php
/**
 * HotelReservation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * HotelReservation Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HotelReservation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HotelReservation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'check_in' => '\DateTime',
        'check_out' => '\DateTime',
        'property_code' => 'string',
        'property_name' => 'string',
        'total_price' => '\Swagger\Client\Model\Amount',
        'traveler_ids' => 'string[]',
        'booking_info' => '\Swagger\Client\Model\HotelReservationBookingInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'check_in' => 'date',
        'check_out' => 'date',
        'property_code' => null,
        'property_name' => null,
        'total_price' => null,
        'traveler_ids' => null,
        'booking_info' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'check_in' => 'check_in',
        'check_out' => 'check_out',
        'property_code' => 'property_code',
        'property_name' => 'property_name',
        'total_price' => 'total_price',
        'traveler_ids' => 'traveler_ids',
        'booking_info' => 'booking_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'check_in' => 'setCheckIn',
        'check_out' => 'setCheckOut',
        'property_code' => 'setPropertyCode',
        'property_name' => 'setPropertyName',
        'total_price' => 'setTotalPrice',
        'traveler_ids' => 'setTravelerIds',
        'booking_info' => 'setBookingInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'check_in' => 'getCheckIn',
        'check_out' => 'getCheckOut',
        'property_code' => 'getPropertyCode',
        'property_name' => 'getPropertyName',
        'total_price' => 'getTotalPrice',
        'traveler_ids' => 'getTravelerIds',
        'booking_info' => 'getBookingInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['check_in'] = isset($data['check_in']) ? $data['check_in'] : null;
        $this->container['check_out'] = isset($data['check_out']) ? $data['check_out'] : null;
        $this->container['property_code'] = isset($data['property_code']) ? $data['property_code'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['traveler_ids'] = isset($data['traveler_ids']) ? $data['traveler_ids'] : null;
        $this->container['booking_info'] = isset($data['booking_info']) ? $data['booking_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['check_in'] === null) {
            $invalid_properties[] = "'check_in' can't be null";
        }
        if ($this->container['check_out'] === null) {
            $invalid_properties[] = "'check_out' can't be null";
        }
        if ($this->container['property_code'] === null) {
            $invalid_properties[] = "'property_code' can't be null";
        }
        if ($this->container['property_name'] === null) {
            $invalid_properties[] = "'property_name' can't be null";
        }
        if ($this->container['traveler_ids'] === null) {
            $invalid_properties[] = "'traveler_ids' can't be null";
        }
        if ($this->container['booking_info'] === null) {
            $invalid_properties[] = "'booking_info' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['check_in'] === null) {
            return false;
        }
        if ($this->container['check_out'] === null) {
            return false;
        }
        if ($this->container['property_code'] === null) {
            return false;
        }
        if ($this->container['property_name'] === null) {
            return false;
        }
        if ($this->container['traveler_ids'] === null) {
            return false;
        }
        if ($this->container['booking_info'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Uniquely identifies this hotel room reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets check_in
     * @return \DateTime
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in
     * @param \DateTime $check_in Date on which the guest will begin their stay in the hotel, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.
     * @return $this
     */
    public function setCheckIn($check_in)
    {
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out
     * @return \DateTime
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out
     * @param \DateTime $check_out Date on which the guest will end their stay in the hotel, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.
     * @return $this
     */
    public function setCheckOut($check_out)
    {
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets property_code
     * @return string
     */
    public function getPropertyCode()
    {
        return $this->container['property_code'];
    }

    /**
     * Sets property_code
     * @param string $property_code The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.
     * @return $this
     */
    public function setPropertyCode($property_code)
    {
        $this->container['property_code'] = $property_code;

        return $this;
    }

    /**
     * Gets property_name
     * @return string
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     * @param string $property_name The name of this hotel.
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets total_price
     * @return \Swagger\Client\Model\Amount
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param \Swagger\Client\Model\Amount $total_price The total price of this stay, from the given check in date to the given check out date.
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets traveler_ids
     * @return string[]
     */
    public function getTravelerIds()
    {
        return $this->container['traveler_ids'];
    }

    /**
     * Sets traveler_ids
     * @param string[] $traveler_ids Traveler identifiers to indicate the travelers to whom this hotel room reservation applies. Generally all non-infant room occupants will be marked in this array.
     * @return $this
     */
    public function setTravelerIds($traveler_ids)
    {
        $this->container['traveler_ids'] = $traveler_ids;

        return $this;
    }

    /**
     * Gets booking_info
     * @return \Swagger\Client\Model\HotelReservationBookingInfo
     */
    public function getBookingInfo()
    {
        return $this->container['booking_info'];
    }

    /**
     * Sets booking_info
     * @param \Swagger\Client\Model\HotelReservationBookingInfo $booking_info Additional details and status of this hotel room reservation.
     * @return $this
     */
    public function setBookingInfo($booking_info)
    {
        $this->container['booking_info'] = $booking_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


