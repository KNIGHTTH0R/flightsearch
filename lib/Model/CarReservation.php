<?php
/**
 * CarReservation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CarReservation Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CarReservation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CarReservation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'pick_up' => 'string',
        'drop_off' => 'string',
        'provider' => '\Swagger\Client\Model\Company',
        'origin' => 'string',
        'car' => '\Swagger\Client\Model\Vehicle',
        'traveler_ids' => 'string[]',
        'booking_info' => '\Swagger\Client\Model\CarReservationBookingInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'pick_up' => null,
        'drop_off' => null,
        'provider' => null,
        'origin' => null,
        'car' => null,
        'traveler_ids' => null,
        'booking_info' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pick_up' => 'pick_up',
        'drop_off' => 'drop_off',
        'provider' => 'provider',
        'origin' => 'origin',
        'car' => 'car',
        'traveler_ids' => 'traveler_ids',
        'booking_info' => 'booking_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pick_up' => 'setPickUp',
        'drop_off' => 'setDropOff',
        'provider' => 'setProvider',
        'origin' => 'setOrigin',
        'car' => 'setCar',
        'traveler_ids' => 'setTravelerIds',
        'booking_info' => 'setBookingInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pick_up' => 'getPickUp',
        'drop_off' => 'getDropOff',
        'provider' => 'getProvider',
        'origin' => 'getOrigin',
        'car' => 'getCar',
        'traveler_ids' => 'getTravelerIds',
        'booking_info' => 'getBookingInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pick_up'] = isset($data['pick_up']) ? $data['pick_up'] : null;
        $this->container['drop_off'] = isset($data['drop_off']) ? $data['drop_off'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['car'] = isset($data['car']) ? $data['car'] : null;
        $this->container['traveler_ids'] = isset($data['traveler_ids']) ? $data['traveler_ids'] : null;
        $this->container['booking_info'] = isset($data['booking_info']) ? $data['booking_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['pick_up'] === null) {
            $invalid_properties[] = "'pick_up' can't be null";
        }
        if ($this->container['drop_off'] === null) {
            $invalid_properties[] = "'drop_off' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalid_properties[] = "'provider' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalid_properties[] = "'origin' can't be null";
        }
        if ($this->container['car'] === null) {
            $invalid_properties[] = "'car' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['pick_up'] === null) {
            return false;
        }
        if ($this->container['drop_off'] === null) {
            return false;
        }
        if ($this->container['provider'] === null) {
            return false;
        }
        if ($this->container['origin'] === null) {
            return false;
        }
        if ($this->container['car'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Uniquely identifies this car rental reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pick_up
     * @return string
     */
    public function getPickUp()
    {
        return $this->container['pick_up'];
    }

    /**
     * Sets pick_up
     * @param string $pick_up Date on which the car rental will be collected from the car rental location. <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-ddTHH.
     * @return $this
     */
    public function setPickUp($pick_up)
    {
        $this->container['pick_up'] = $pick_up;

        return $this;
    }

    /**
     * Gets drop_off
     * @return string
     */
    public function getDropOff()
    {
        return $this->container['drop_off'];
    }

    /**
     * Sets drop_off
     * @param string $drop_off Date at which the car rental will end and the car will be returned to the rental location. <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-ddTHH.
     * @return $this
     */
    public function setDropOff($drop_off)
    {
        $this->container['drop_off'] = $drop_off;

        return $this;
    }

    /**
     * Gets provider
     * @return \Swagger\Client\Model\Company
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param \Swagger\Client\Model\Company $provider Details of the car company offering this rental.
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets origin
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     * @param string $origin This car rental company office location ID. If this is an airport location, this will be the airport's <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a>. Otherwise, this is a custom value provided by the car rental provider.
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets car
     * @return \Swagger\Client\Model\Vehicle
     */
    public function getCar()
    {
        return $this->container['car'];
    }

    /**
     * Sets car
     * @param \Swagger\Client\Model\Vehicle $car A car information object giving further details about the vehicle provided for rental.
     * @return $this
     */
    public function setCar($car)
    {
        $this->container['car'] = $car;

        return $this;
    }

    /**
     * Gets traveler_ids
     * @return string[]
     */
    public function getTravelerIds()
    {
        return $this->container['traveler_ids'];
    }

    /**
     * Sets traveler_ids
     * @param string[] $traveler_ids Traveler identifiers to indicate the travelers to whom this car rental applies. Generally, only drivers of the vehicle will be marked in this array.
     * @return $this
     */
    public function setTravelerIds($traveler_ids)
    {
        $this->container['traveler_ids'] = $traveler_ids;

        return $this;
    }

    /**
     * Gets booking_info
     * @return \Swagger\Client\Model\CarReservationBookingInfo
     */
    public function getBookingInfo()
    {
        return $this->container['booking_info'];
    }

    /**
     * Sets booking_info
     * @param \Swagger\Client\Model\CarReservationBookingInfo $booking_info Additional details the status of this car rental reservation.
     * @return $this
     */
    public function setBookingInfo($booking_info)
    {
        $this->container['booking_info'] = $booking_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


