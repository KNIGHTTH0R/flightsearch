<?php
/**
 * Reservation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Reservation Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Reservation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Reservation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'flight_tickets' => '\Swagger\Client\Model\FlightTicket',
        'unticketed_flights' => '\Swagger\Client\Model\FlightReservationBound[]',
        'cars' => '\Swagger\Client\Model\CarReservation[]',
        'hotels' => '\Swagger\Client\Model\HotelReservation[]',
        'others' => '\Swagger\Client\Model\OtherReservation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'flight_tickets' => null,
        'unticketed_flights' => null,
        'cars' => null,
        'hotels' => null,
        'others' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'flight_tickets' => 'flight_tickets',
        'unticketed_flights' => 'unticketed_flights',
        'cars' => 'cars',
        'hotels' => 'hotels',
        'others' => 'others'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'flight_tickets' => 'setFlightTickets',
        'unticketed_flights' => 'setUnticketedFlights',
        'cars' => 'setCars',
        'hotels' => 'setHotels',
        'others' => 'setOthers'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'flight_tickets' => 'getFlightTickets',
        'unticketed_flights' => 'getUnticketedFlights',
        'cars' => 'getCars',
        'hotels' => 'getHotels',
        'others' => 'getOthers'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flight_tickets'] = isset($data['flight_tickets']) ? $data['flight_tickets'] : null;
        $this->container['unticketed_flights'] = isset($data['unticketed_flights']) ? $data['unticketed_flights'] : null;
        $this->container['cars'] = isset($data['cars']) ? $data['cars'] : null;
        $this->container['hotels'] = isset($data['hotels']) ? $data['hotels'] : null;
        $this->container['others'] = isset($data['others']) ? $data['others'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets flight_tickets
     * @return \Swagger\Client\Model\FlightTicket
     */
    public function getFlightTickets()
    {
        return $this->container['flight_tickets'];
    }

    /**
     * Sets flight_tickets
     * @param \Swagger\Client\Model\FlightTicket $flight_tickets
     * @return $this
     */
    public function setFlightTickets($flight_tickets)
    {
        $this->container['flight_tickets'] = $flight_tickets;

        return $this;
    }

    /**
     * Gets unticketed_flights
     * @return \Swagger\Client\Model\FlightReservationBound[]
     */
    public function getUnticketedFlights()
    {
        return $this->container['unticketed_flights'];
    }

    /**
     * Sets unticketed_flights
     * @param \Swagger\Client\Model\FlightReservationBound[] $unticketed_flights The flight itineraries in this reservation that have not yet been ticketed or priced.
     * @return $this
     */
    public function setUnticketedFlights($unticketed_flights)
    {
        $this->container['unticketed_flights'] = $unticketed_flights;

        return $this;
    }

    /**
     * Gets cars
     * @return \Swagger\Client\Model\CarReservation[]
     */
    public function getCars()
    {
        return $this->container['cars'];
    }

    /**
     * Sets cars
     * @param \Swagger\Client\Model\CarReservation[] $cars The rental cars reserved.
     * @return $this
     */
    public function setCars($cars)
    {
        $this->container['cars'] = $cars;

        return $this;
    }

    /**
     * Gets hotels
     * @return \Swagger\Client\Model\HotelReservation[]
     */
    public function getHotels()
    {
        return $this->container['hotels'];
    }

    /**
     * Sets hotels
     * @param \Swagger\Client\Model\HotelReservation[] $hotels The hotel room bookings in this reservation.
     * @return $this
     */
    public function setHotels($hotels)
    {
        $this->container['hotels'] = $hotels;

        return $this;
    }

    /**
     * Gets others
     * @return \Swagger\Client\Model\OtherReservation[]
     */
    public function getOthers()
    {
        return $this->container['others'];
    }

    /**
     * Sets others
     * @param \Swagger\Client\Model\OtherReservation[] $others Free text information to represent other travel items that may be considered part of the travel itinerary in this reservation.
     * @return $this
     */
    public function setOthers($others)
    {
        $this->container['others'] = $others;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


