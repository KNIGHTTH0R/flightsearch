<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amadeus Travel Innovation Sandbox
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation airportAutocomplete
     *
     * Airport Autocomplete - Find an IATA location code for flight search based on a city or airport name using the term parameter. By only using the country parameter, this API is also able to find all the IATA location codes associated with a country. Both term and country parameters can be used together to filter the results accordingly. The API is fully JQuery-Autocomplete compatible to enable you to quickly build a drop-down list for your users to find the right airport easily.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $term Search keyword that should represent the start of a word in a city or airport name. (required)
     * @param string $country Identified a country based of a &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-2#Current_codes\&quot;&gt;ISO 3166-1 alpha-2 code&lt;/a&gt; (optional, default to US)
     * @param bool $all_airports Boolean to include or not all airports, no matter their traffic rank. False by default, to only display relevant airports. (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AirportAutocompleteResponse[]
     */
    public function airportAutocomplete($apikey, $term, $country = 'US', $all_airports = 'false')
    {
        list($response) = $this->airportAutocompleteWithHttpInfo($apikey, $term, $country, $all_airports);
        return $response;
    }

    /**
     * Operation airportAutocompleteWithHttpInfo
     *
     * Airport Autocomplete - Find an IATA location code for flight search based on a city or airport name using the term parameter. By only using the country parameter, this API is also able to find all the IATA location codes associated with a country. Both term and country parameters can be used together to filter the results accordingly. The API is fully JQuery-Autocomplete compatible to enable you to quickly build a drop-down list for your users to find the right airport easily.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $term Search keyword that should represent the start of a word in a city or airport name. (required)
     * @param string $country Identified a country based of a &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-2#Current_codes\&quot;&gt;ISO 3166-1 alpha-2 code&lt;/a&gt; (optional, default to US)
     * @param bool $all_airports Boolean to include or not all airports, no matter their traffic rank. False by default, to only display relevant airports. (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AirportAutocompleteResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function airportAutocompleteWithHttpInfo($apikey, $term, $country = 'US', $all_airports = 'false')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling airportAutocomplete');
        }
        // verify the required parameter 'term' is set
        if ($term === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term when calling airportAutocomplete');
        }
        // parse inputs
        $resourcePath = "/airports/autocomplete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = $this->apiClient->getSerializer()->toQueryValue($term);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($all_airports !== null) {
            $queryParams['all_airports'] = $this->apiClient->getSerializer()->toQueryValue($all_airports);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AirportAutocompleteResponse[]',
                '/airports/autocomplete'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AirportAutocompleteResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AirportAutocompleteResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carRentalAirportSearch
     *
     * Car Rental Airport Search - Find car rental providers and rates when you provide an airport code, as well as the pick-up and drop-off dates. Optional parameters such as currency and rental provider codes are also available and can be used to narrow down the results. This API is an ideal pairing with the flight and hotel search to provide ground transportation options at the destination.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $location The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the airport at which the car will be rented. (required)
     * @param string $pick_up Date on which the car rental will be collected from the car rental location. If no time is provided, a default value of 09:00 is used. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $drop_off Date at which the car rental will end and the car will be returned to the rental location. If no time is provided, a default value of 17:00 is used. (required)
     * @param string $lang The preferred language of the content related to each car rental. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; to use when displaying prices and rates related to the car rental. (optional, default to USD)
     * @param string $provider 2 character car rental provider code. You may provide this parameter more than once. (optional, default to ZI)
     * @param string $rate_class Allows to request specific rate types. (optional, default to ALL)
     * @param string $rate_plan Qualifies the rate depending on the pickup date and the rental duration. (optional, default to DAILY)
     * @param string $rate_filter Defines the types of rates to be returned in the output (optional, default to ESTIMATED)
     * @param string[] $vehicle Specifies the type of vehicle to be rented. If selected, the results set will include only vehicles that match these type descriptions. The enumerations above correspond to ACRISS Pseudo Codes, and you may also provide an ACRISS pseudo code directly. If specifying a vehicle-specific ACRISS code, you may provide this parameter up to 3 times. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CarSearchResponse
     */
    public function carRentalAirportSearch($apikey, $location, $pick_up, $drop_off, $lang = 'EN', $currency = 'USD', $provider = 'ZI', $rate_class = 'ALL', $rate_plan = 'DAILY', $rate_filter = 'ESTIMATED', $vehicle = null)
    {
        list($response) = $this->carRentalAirportSearchWithHttpInfo($apikey, $location, $pick_up, $drop_off, $lang, $currency, $provider, $rate_class, $rate_plan, $rate_filter, $vehicle);
        return $response;
    }

    /**
     * Operation carRentalAirportSearchWithHttpInfo
     *
     * Car Rental Airport Search - Find car rental providers and rates when you provide an airport code, as well as the pick-up and drop-off dates. Optional parameters such as currency and rental provider codes are also available and can be used to narrow down the results. This API is an ideal pairing with the flight and hotel search to provide ground transportation options at the destination.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $location The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the airport at which the car will be rented. (required)
     * @param string $pick_up Date on which the car rental will be collected from the car rental location. If no time is provided, a default value of 09:00 is used. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $drop_off Date at which the car rental will end and the car will be returned to the rental location. If no time is provided, a default value of 17:00 is used. (required)
     * @param string $lang The preferred language of the content related to each car rental. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; to use when displaying prices and rates related to the car rental. (optional, default to USD)
     * @param string $provider 2 character car rental provider code. You may provide this parameter more than once. (optional, default to ZI)
     * @param string $rate_class Allows to request specific rate types. (optional, default to ALL)
     * @param string $rate_plan Qualifies the rate depending on the pickup date and the rental duration. (optional, default to DAILY)
     * @param string $rate_filter Defines the types of rates to be returned in the output (optional, default to ESTIMATED)
     * @param string[] $vehicle Specifies the type of vehicle to be rented. If selected, the results set will include only vehicles that match these type descriptions. The enumerations above correspond to ACRISS Pseudo Codes, and you may also provide an ACRISS pseudo code directly. If specifying a vehicle-specific ACRISS code, you may provide this parameter up to 3 times. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CarSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function carRentalAirportSearchWithHttpInfo($apikey, $location, $pick_up, $drop_off, $lang = 'EN', $currency = 'USD', $provider = 'ZI', $rate_class = 'ALL', $rate_plan = 'DAILY', $rate_filter = 'ESTIMATED', $vehicle = null)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling carRentalAirportSearch');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling carRentalAirportSearch');
        }
        // verify the required parameter 'pick_up' is set
        if ($pick_up === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_up when calling carRentalAirportSearch');
        }
        // verify the required parameter 'drop_off' is set
        if ($drop_off === null) {
            throw new \InvalidArgumentException('Missing the required parameter $drop_off when calling carRentalAirportSearch');
        }
        // parse inputs
        $resourcePath = "/cars/search-airport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($pick_up !== null) {
            $queryParams['pick_up'] = $this->apiClient->getSerializer()->toQueryValue($pick_up);
        }
        // query params
        if ($drop_off !== null) {
            $queryParams['drop_off'] = $this->apiClient->getSerializer()->toQueryValue($drop_off);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($provider !== null) {
            $queryParams['provider'] = $this->apiClient->getSerializer()->toQueryValue($provider);
        }
        // query params
        if ($rate_class !== null) {
            $queryParams['rate_class'] = $this->apiClient->getSerializer()->toQueryValue($rate_class);
        }
        // query params
        if ($rate_plan !== null) {
            $queryParams['rate_plan'] = $this->apiClient->getSerializer()->toQueryValue($rate_plan);
        }
        // query params
        if ($rate_filter !== null) {
            $queryParams['rate_filter'] = $this->apiClient->getSerializer()->toQueryValue($rate_filter);
        }
        // query params
        if (is_array($vehicle)) {
            $vehicle = $this->apiClient->getSerializer()->serializeCollection($vehicle, 'multi', true);
        }
        if ($vehicle !== null) {
            $queryParams['vehicle'] = $this->apiClient->getSerializer()->toQueryValue($vehicle);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CarSearchResponse',
                '/cars/search-airport'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CarSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CarSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation carRentalGeosearch
     *
     * Car Rental Geosearch - Locate car rental providers and available vehicles when you define a circular area with one coordinate and radius, as well as the pick-up and drop-off dates. Optional parameters such as currency and rental provider codes are also available and can be used to narrow down the results. This API is an ideal pairing with the flight and hotel search to provide ground transportation options at the destination.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param float $latitude Latitude of the center of the search. (required)
     * @param float $longitude Longitude of the center of the search. (required)
     * @param int $radius Radius around the center to look for hotels in kilometers (km). (required)
     * @param string $pick_up Date on which the car rental will be collected from the car rental location. If no time is provided, a default value of 09:00 is used. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $drop_off Date at which the car rental will end and the car will be returned to the rental location. If no time is provided, a default value of 17:00 is used. (required)
     * @param string $lang The preferred language of the content related to each car rental. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; to use when displaying prices and rates related to the car rental. (optional, default to USD)
     * @param string $provider 2 character car rental provider code. You may provide this parameter more than once. (optional, default to ZI)
     * @param string $rate_class Allows to request specific rate types. (optional, default to ALL)
     * @param string $rate_plan Qualifies the rate depending on the pickup date and the rental duration. (optional, default to DAILY)
     * @param string $rate_filter Defines the types of rates to be returned in the output (optional, default to ESTIMATED)
     * @param string[] $vehicle Specifies the type of vehicle to be rented. If selected, the results set will include only vehicles that match these type descriptions. The enumerations above correspond to ACRISS Pseudo Codes, and you may also provide an ACRISS pseudo code directly. If specifying a vehicle-specific ACRISS code, you may provide this parameter up to 3 times. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CarSearchResponse
     */
    public function carRentalGeosearch($apikey, $latitude, $longitude, $radius, $pick_up, $drop_off, $lang = 'EN', $currency = 'USD', $provider = 'ZI', $rate_class = 'ALL', $rate_plan = 'DAILY', $rate_filter = 'ESTIMATED', $vehicle = null)
    {
        list($response) = $this->carRentalGeosearchWithHttpInfo($apikey, $latitude, $longitude, $radius, $pick_up, $drop_off, $lang, $currency, $provider, $rate_class, $rate_plan, $rate_filter, $vehicle);
        return $response;
    }

    /**
     * Operation carRentalGeosearchWithHttpInfo
     *
     * Car Rental Geosearch - Locate car rental providers and available vehicles when you define a circular area with one coordinate and radius, as well as the pick-up and drop-off dates. Optional parameters such as currency and rental provider codes are also available and can be used to narrow down the results. This API is an ideal pairing with the flight and hotel search to provide ground transportation options at the destination.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param float $latitude Latitude of the center of the search. (required)
     * @param float $longitude Longitude of the center of the search. (required)
     * @param int $radius Radius around the center to look for hotels in kilometers (km). (required)
     * @param string $pick_up Date on which the car rental will be collected from the car rental location. If no time is provided, a default value of 09:00 is used. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $drop_off Date at which the car rental will end and the car will be returned to the rental location. If no time is provided, a default value of 17:00 is used. (required)
     * @param string $lang The preferred language of the content related to each car rental. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; to use when displaying prices and rates related to the car rental. (optional, default to USD)
     * @param string $provider 2 character car rental provider code. You may provide this parameter more than once. (optional, default to ZI)
     * @param string $rate_class Allows to request specific rate types. (optional, default to ALL)
     * @param string $rate_plan Qualifies the rate depending on the pickup date and the rental duration. (optional, default to DAILY)
     * @param string $rate_filter Defines the types of rates to be returned in the output (optional, default to ESTIMATED)
     * @param string[] $vehicle Specifies the type of vehicle to be rented. If selected, the results set will include only vehicles that match these type descriptions. The enumerations above correspond to ACRISS Pseudo Codes, and you may also provide an ACRISS pseudo code directly. If specifying a vehicle-specific ACRISS code, you may provide this parameter up to 3 times. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CarSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function carRentalGeosearchWithHttpInfo($apikey, $latitude, $longitude, $radius, $pick_up, $drop_off, $lang = 'EN', $currency = 'USD', $provider = 'ZI', $rate_class = 'ALL', $rate_plan = 'DAILY', $rate_filter = 'ESTIMATED', $vehicle = null)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling carRentalGeosearch');
        }
        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling carRentalGeosearch');
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling carRentalGeosearch');
        }
        // verify the required parameter 'radius' is set
        if ($radius === null) {
            throw new \InvalidArgumentException('Missing the required parameter $radius when calling carRentalGeosearch');
        }
        // verify the required parameter 'pick_up' is set
        if ($pick_up === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_up when calling carRentalGeosearch');
        }
        // verify the required parameter 'drop_off' is set
        if ($drop_off === null) {
            throw new \InvalidArgumentException('Missing the required parameter $drop_off when calling carRentalGeosearch');
        }
        // parse inputs
        $resourcePath = "/cars/search-circle";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($pick_up !== null) {
            $queryParams['pick_up'] = $this->apiClient->getSerializer()->toQueryValue($pick_up);
        }
        // query params
        if ($drop_off !== null) {
            $queryParams['drop_off'] = $this->apiClient->getSerializer()->toQueryValue($drop_off);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($provider !== null) {
            $queryParams['provider'] = $this->apiClient->getSerializer()->toQueryValue($provider);
        }
        // query params
        if ($rate_class !== null) {
            $queryParams['rate_class'] = $this->apiClient->getSerializer()->toQueryValue($rate_class);
        }
        // query params
        if ($rate_plan !== null) {
            $queryParams['rate_plan'] = $this->apiClient->getSerializer()->toQueryValue($rate_plan);
        }
        // query params
        if ($rate_filter !== null) {
            $queryParams['rate_filter'] = $this->apiClient->getSerializer()->toQueryValue($rate_filter);
        }
        // query params
        if (is_array($vehicle)) {
            $vehicle = $this->apiClient->getSerializer()->serializeCollection($vehicle, 'multi', true);
        }
        if ($vehicle !== null) {
            $queryParams['vehicle'] = $this->apiClient->getSerializer()->toQueryValue($vehicle);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CarSearchResponse',
                '/cars/search-circle'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CarSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CarSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flightAffiliateSearch
     *
     * Flight Affiliate Search - Use Travel Audience Connect's affiliate network API to search flights from our list of partners and provides deep-links to allow the user to book directly on the airline website.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin City code from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (required)
     * @param string $departure_date The date on which the traveler will depart from the origin to go to the destination. The maximum scope for a date range is 2 days, for a larger scope, use the Extensive Search! (required)
     * @param string $return_date The date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, the search will find only one-way trips. If this, or the return_by parameter are specified, only return trips are found (optional, default to 2017-08-28)
     * @param int $adults The number of adult (age 12 and over) passengers traveling on this flight. (optional, default to 1)
     * @param int $children The number of child (younger than age 12 on date of departure) passengers traveling on this flight who will each have their own separate seat (optional, default to 0)
     * @param int $infants The number of infant (younger than age 2 on date of departure) passengers traveling on this flight. Infants travel in the lap of an adult passenger, and thus the number of infants must not exceed the number of adults. (optional, default to 0)
     * @param string[] $include_merchants If specified, all results will include at least one flight where one or more of these airlines is the marketing carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt; (optional)
     * @param string[] $exclude_merchants If specified, no results will include any flights where any of these airlines is the marketing carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt; (optional)
     * @param int $max_price Maximum price of trips to find in the result set, in USD (US dollars) unless some other currency code is specified. By default, no limit is applied (optional, default to 980)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to EUR)
     * @param bool $mobile Setting this to true will show mobile web deeplinks (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AffiliateSearchResponse
     */
    public function flightAffiliateSearch($apikey, $origin, $destination, $departure_date, $return_date = '2017-08-28', $adults = '1', $children = '0', $infants = '0', $include_merchants = null, $exclude_merchants = null, $max_price = '980', $currency = 'EUR', $mobile = 'false')
    {
        list($response) = $this->flightAffiliateSearchWithHttpInfo($apikey, $origin, $destination, $departure_date, $return_date, $adults, $children, $infants, $include_merchants, $exclude_merchants, $max_price, $currency, $mobile);
        return $response;
    }

    /**
     * Operation flightAffiliateSearchWithHttpInfo
     *
     * Flight Affiliate Search - Use Travel Audience Connect's affiliate network API to search flights from our list of partners and provides deep-links to allow the user to book directly on the airline website.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin City code from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (required)
     * @param string $departure_date The date on which the traveler will depart from the origin to go to the destination. The maximum scope for a date range is 2 days, for a larger scope, use the Extensive Search! (required)
     * @param string $return_date The date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, the search will find only one-way trips. If this, or the return_by parameter are specified, only return trips are found (optional, default to 2017-08-28)
     * @param int $adults The number of adult (age 12 and over) passengers traveling on this flight. (optional, default to 1)
     * @param int $children The number of child (younger than age 12 on date of departure) passengers traveling on this flight who will each have their own separate seat (optional, default to 0)
     * @param int $infants The number of infant (younger than age 2 on date of departure) passengers traveling on this flight. Infants travel in the lap of an adult passenger, and thus the number of infants must not exceed the number of adults. (optional, default to 0)
     * @param string[] $include_merchants If specified, all results will include at least one flight where one or more of these airlines is the marketing carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt; (optional)
     * @param string[] $exclude_merchants If specified, no results will include any flights where any of these airlines is the marketing carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt; (optional)
     * @param int $max_price Maximum price of trips to find in the result set, in USD (US dollars) unless some other currency code is specified. By default, no limit is applied (optional, default to 980)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to EUR)
     * @param bool $mobile Setting this to true will show mobile web deeplinks (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AffiliateSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function flightAffiliateSearchWithHttpInfo($apikey, $origin, $destination, $departure_date, $return_date = '2017-08-28', $adults = '1', $children = '0', $infants = '0', $include_merchants = null, $exclude_merchants = null, $max_price = '980', $currency = 'EUR', $mobile = 'false')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling flightAffiliateSearch');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling flightAffiliateSearch');
        }
        // verify the required parameter 'destination' is set
        if ($destination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination when calling flightAffiliateSearch');
        }
        // verify the required parameter 'departure_date' is set
        if ($departure_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departure_date when calling flightAffiliateSearch');
        }
        // parse inputs
        $resourcePath = "/flights/affiliate-search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['departure_date'] = $this->apiClient->getSerializer()->toQueryValue($departure_date);
        }
        // query params
        if ($return_date !== null) {
            $queryParams['return_date'] = $this->apiClient->getSerializer()->toQueryValue($return_date);
        }
        // query params
        if ($adults !== null) {
            $queryParams['adults'] = $this->apiClient->getSerializer()->toQueryValue($adults);
        }
        // query params
        if ($children !== null) {
            $queryParams['children'] = $this->apiClient->getSerializer()->toQueryValue($children);
        }
        // query params
        if ($infants !== null) {
            $queryParams['infants'] = $this->apiClient->getSerializer()->toQueryValue($infants);
        }
        // query params
        if (is_array($include_merchants)) {
            $include_merchants = $this->apiClient->getSerializer()->serializeCollection($include_merchants, 'csv', true);
        }
        if ($include_merchants !== null) {
            $queryParams['include_merchants'] = $this->apiClient->getSerializer()->toQueryValue($include_merchants);
        }
        // query params
        if (is_array($exclude_merchants)) {
            $exclude_merchants = $this->apiClient->getSerializer()->serializeCollection($exclude_merchants, 'csv', true);
        }
        if ($exclude_merchants !== null) {
            $queryParams['exclude_merchants'] = $this->apiClient->getSerializer()->toQueryValue($exclude_merchants);
        }
        // query params
        if ($max_price !== null) {
            $queryParams['max_price'] = $this->apiClient->getSerializer()->toQueryValue($max_price);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($mobile !== null) {
            $queryParams['mobile'] = $this->apiClient->getSerializer()->toQueryValue($mobile);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AffiliateSearchResponse',
                '/flights/affiliate-search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AffiliateSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffiliateSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flightExtensiveSearch
     *
     * Flight Extensive Search - Build travel searches based on very flexible and open range of dates. You can use it to answer questions such as \"When is the best date to fly...\".  It's built on Amadeus' Featured Results technology, which returns thousands of results (prices, itineraries and dates) in a matter of milliseconds. Results are available over half a calendar year with a 1 to 15 day stay duration
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (required)
     * @param string $departure_date Range of dates between which the traveler could depart. Dates are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-dd date format. Ranges are inclusive and ranges of months will apply from the start to the end of the month. If just a single date is specified, only that date will be searched. By default, the date range starts today and applies up to 361 in the future is applied. Past dates are generally not supported, future dates should be in the next 361 days, although results start to become sparse after about 6 months in the future, as airlines may still be defining their schedules. The default is to search all future dates available. (optional, default to 2017-08-16--2017-08-26)
     * @param bool $one_way When set to true, the query will be for a single trip from the origin to the destination. When this parameter is not provided, or is set to false, the query is for a round trip from the origin to the destination and back again. (optional, default to false)
     * @param string $duration The allowed duration or range of durations of the trip, in days. This parameter must not be set if the one-way parameter is set to true. (optional, default to 1--15)
     * @param bool $direct Limit the search to results that do not require the passenger to change plane? (optional, default to false)
     * @param string $max_price Maximum price of trips to find in the result set, in the currency specified for this origin and destination pair in the cache contents spreadsheet. So, for example, if the origin is NYC, and the max price is 400, this means 400 USD. If the origin is PAR, and the max price is 400, this means 400 EUR. By default, no limit is applied (optional, default to 950)
     * @param string $aggregation_mode Specifies the granularity of results to be found. DAY is the default when one-way is true finds a result for departure date in the date range. STAY is the default otherwise and finds all round trip permutations for this route withim the given date range. DESTINATION finds one result, only the cheapest price for this route over the provided date range. WEEK finds the cheapest result for every week in the date range. Note that specifying a small granularity but a large search scope may result in a huge output. For some very large outputs, the API may refuse to provide a result. (optional, default to DAY)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExtremeSearchResponse
     */
    public function flightExtensiveSearch($apikey, $origin, $destination, $departure_date = '2017-08-16--2017-08-26', $one_way = 'false', $duration = '1--15', $direct = 'false', $max_price = '950', $aggregation_mode = 'DAY')
    {
        list($response) = $this->flightExtensiveSearchWithHttpInfo($apikey, $origin, $destination, $departure_date, $one_way, $duration, $direct, $max_price, $aggregation_mode);
        return $response;
    }

    /**
     * Operation flightExtensiveSearchWithHttpInfo
     *
     * Flight Extensive Search - Build travel searches based on very flexible and open range of dates. You can use it to answer questions such as \"When is the best date to fly...\".  It's built on Amadeus' Featured Results technology, which returns thousands of results (prices, itineraries and dates) in a matter of milliseconds. Results are available over half a calendar year with a 1 to 15 day stay duration
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (required)
     * @param string $departure_date Range of dates between which the traveler could depart. Dates are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-dd date format. Ranges are inclusive and ranges of months will apply from the start to the end of the month. If just a single date is specified, only that date will be searched. By default, the date range starts today and applies up to 361 in the future is applied. Past dates are generally not supported, future dates should be in the next 361 days, although results start to become sparse after about 6 months in the future, as airlines may still be defining their schedules. The default is to search all future dates available. (optional, default to 2017-08-16--2017-08-26)
     * @param bool $one_way When set to true, the query will be for a single trip from the origin to the destination. When this parameter is not provided, or is set to false, the query is for a round trip from the origin to the destination and back again. (optional, default to false)
     * @param string $duration The allowed duration or range of durations of the trip, in days. This parameter must not be set if the one-way parameter is set to true. (optional, default to 1--15)
     * @param bool $direct Limit the search to results that do not require the passenger to change plane? (optional, default to false)
     * @param string $max_price Maximum price of trips to find in the result set, in the currency specified for this origin and destination pair in the cache contents spreadsheet. So, for example, if the origin is NYC, and the max price is 400, this means 400 USD. If the origin is PAR, and the max price is 400, this means 400 EUR. By default, no limit is applied (optional, default to 950)
     * @param string $aggregation_mode Specifies the granularity of results to be found. DAY is the default when one-way is true finds a result for departure date in the date range. STAY is the default otherwise and finds all round trip permutations for this route withim the given date range. DESTINATION finds one result, only the cheapest price for this route over the provided date range. WEEK finds the cheapest result for every week in the date range. Note that specifying a small granularity but a large search scope may result in a huge output. For some very large outputs, the API may refuse to provide a result. (optional, default to DAY)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExtremeSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function flightExtensiveSearchWithHttpInfo($apikey, $origin, $destination, $departure_date = '2017-08-16--2017-08-26', $one_way = 'false', $duration = '1--15', $direct = 'false', $max_price = '950', $aggregation_mode = 'DAY')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling flightExtensiveSearch');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling flightExtensiveSearch');
        }
        // verify the required parameter 'destination' is set
        if ($destination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination when calling flightExtensiveSearch');
        }
        // parse inputs
        $resourcePath = "/flights/extensive-search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['departure_date'] = $this->apiClient->getSerializer()->toQueryValue($departure_date);
        }
        // query params
        if ($one_way !== null) {
            $queryParams['one-way'] = $this->apiClient->getSerializer()->toQueryValue($one_way);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }
        // query params
        if ($direct !== null) {
            $queryParams['direct'] = $this->apiClient->getSerializer()->toQueryValue($direct);
        }
        // query params
        if ($max_price !== null) {
            $queryParams['max_price'] = $this->apiClient->getSerializer()->toQueryValue($max_price);
        }
        // query params
        if ($aggregation_mode !== null) {
            $queryParams['aggregation_mode'] = $this->apiClient->getSerializer()->toQueryValue($aggregation_mode);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExtremeSearchResponse',
                '/flights/extensive-search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExtremeSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExtremeSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flightInspirationSearch
     *
     * Flight Inspiration Search - Go beyond the traditional search by origin, destination and dates to meet the needs of travelers looking for suggestions and a search experience that reflects the way they choose their trip. This can help you answer the question \"Where can I go within a given travel budget?\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (optional, default to LAX)
     * @param string $departure_date Range of dates between which the traveler could depart. Dates are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-dd date format. Ranges are inclusive and ranges of months will apply from the start to the end of the month. If just a single date is specified, only that date will be searched. By default, the date range starts today and applies up to 361 in the future is applied. Past dates are generally not supported, future dates should be in the next 361 days, although results start to become sparse after about 6 months in the future, as airlines may still be defining their schedules. The default is to search all future dates available. (optional, default to 2017-08-16--2017-08-26)
     * @param bool $one_way When set to true, the query will be for a single trip from the origin to the destination. When this parameter is not provided, or is set to false, the query is for a round trip from the origin to the destination and back again. (optional, default to false)
     * @param string $duration The allowed duration or range of durations of the trip, in days. This parameter must not be set if the one-way parameter is set to true. (optional, default to 1--15)
     * @param bool $direct Limit the search to results that do not require the passenger to change plane? (optional, default to false)
     * @param string $max_price Maximum price of trips to find in the result set, in the currency specified for this origin and destination pair in the cache contents spreadsheet. So, for example, if the origin is NYC, and the max price is 400, this means 400 USD. If the origin is PAR, and the max price is 400, this means 400 EUR. By default, no limit is applied (optional)
     * @param string $aggregation_mode Specifies the granularity of results to be found. DESTINATION is the default and finds one result per city. COUNTRY finds one result per country, DAY finds on result for every day in the date range, WEEK finds one result for every week in the date range. Note that specifying a small granularity but a large search scope may result in a huge output. For some very large outputs, the API may refuse to provide a result. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExtremeSearchResponse
     */
    public function flightInspirationSearch($apikey, $origin, $destination = 'LAX', $departure_date = '2017-08-16--2017-08-26', $one_way = 'false', $duration = '1--15', $direct = 'false', $max_price = null, $aggregation_mode = null)
    {
        list($response) = $this->flightInspirationSearchWithHttpInfo($apikey, $origin, $destination, $departure_date, $one_way, $duration, $direct, $max_price, $aggregation_mode);
        return $response;
    }

    /**
     * Operation flightInspirationSearchWithHttpInfo
     *
     * Flight Inspiration Search - Go beyond the traditional search by origin, destination and dates to meet the needs of travelers looking for suggestions and a search experience that reflects the way they choose their trip. This can help you answer the question \"Where can I go within a given travel budget?\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (optional, default to LAX)
     * @param string $departure_date Range of dates between which the traveler could depart. Dates are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-dd date format. Ranges are inclusive and ranges of months will apply from the start to the end of the month. If just a single date is specified, only that date will be searched. By default, the date range starts today and applies up to 361 in the future is applied. Past dates are generally not supported, future dates should be in the next 361 days, although results start to become sparse after about 6 months in the future, as airlines may still be defining their schedules. The default is to search all future dates available. (optional, default to 2017-08-16--2017-08-26)
     * @param bool $one_way When set to true, the query will be for a single trip from the origin to the destination. When this parameter is not provided, or is set to false, the query is for a round trip from the origin to the destination and back again. (optional, default to false)
     * @param string $duration The allowed duration or range of durations of the trip, in days. This parameter must not be set if the one-way parameter is set to true. (optional, default to 1--15)
     * @param bool $direct Limit the search to results that do not require the passenger to change plane? (optional, default to false)
     * @param string $max_price Maximum price of trips to find in the result set, in the currency specified for this origin and destination pair in the cache contents spreadsheet. So, for example, if the origin is NYC, and the max price is 400, this means 400 USD. If the origin is PAR, and the max price is 400, this means 400 EUR. By default, no limit is applied (optional)
     * @param string $aggregation_mode Specifies the granularity of results to be found. DESTINATION is the default and finds one result per city. COUNTRY finds one result per country, DAY finds on result for every day in the date range, WEEK finds one result for every week in the date range. Note that specifying a small granularity but a large search scope may result in a huge output. For some very large outputs, the API may refuse to provide a result. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExtremeSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function flightInspirationSearchWithHttpInfo($apikey, $origin, $destination = 'LAX', $departure_date = '2017-08-16--2017-08-26', $one_way = 'false', $duration = '1--15', $direct = 'false', $max_price = null, $aggregation_mode = null)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling flightInspirationSearch');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling flightInspirationSearch');
        }
        // parse inputs
        $resourcePath = "/flights/inspiration-search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['departure_date'] = $this->apiClient->getSerializer()->toQueryValue($departure_date);
        }
        // query params
        if ($one_way !== null) {
            $queryParams['one-way'] = $this->apiClient->getSerializer()->toQueryValue($one_way);
        }
        // query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }
        // query params
        if ($direct !== null) {
            $queryParams['direct'] = $this->apiClient->getSerializer()->toQueryValue($direct);
        }
        // query params
        if ($max_price !== null) {
            $queryParams['max_price'] = $this->apiClient->getSerializer()->toQueryValue($max_price);
        }
        // query params
        if ($aggregation_mode !== null) {
            $queryParams['aggregation_mode'] = $this->apiClient->getSerializer()->toQueryValue($aggregation_mode);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExtremeSearchResponse',
                '/flights/inspiration-search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExtremeSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExtremeSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flightLowFareSearch
     *
     * Flight Low-Fare Search - Find the cheapest one way or return itineraries and fares between two airports at specific dates.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin City code from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (required)
     * @param string $departure_date The date on which the traveler will depart from the origin to go to the destination. You can specify a date range of up to 2 days. For a larger date range, use the Extensive Search. Dates are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-dd date format and separated by --. (required)
     * @param string $return_date The date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, the search will find only one-way trips. If this, or the return_by parameter are specified, only return trips are found. You can specify a date range of up to 2 days. (optional, default to 2017-08-28)
     * @param string $arrive_by The datetime by which the outbound flight should arrive, based on local time at the destination airport.  Date-times are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-ddTHH:mm date format (optional, default to 2017-08-25T16:00)
     * @param string $return_by The time by which the inbound flight should arrive, based on local time at the airport specified as the origin parameter (optional, default to 2017-08-28T08:00)
     * @param int $adults The number of adult (age 12 and over) passengers traveling on this flight. (optional, default to 1)
     * @param int $children The number of child (younger than age 12 on date of departure) passengers traveling on this flight who will each have their own separate seat (optional, default to 0)
     * @param int $infants The number of infant (younger than age 2 on date of departure) passengers traveling on this flight. Infants travel in the lap of an adult passenger, and thus the number of infants must not exceed the number of adults. (optional, default to 0)
     * @param string[] $include_airlines If specified, all results will include at least one flight where one or more of these airlines is the marketing carrier. This behaves as an OR function. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;. (optional)
     * @param string[] $exclude_airlines If specified, no results will include any flights where any of these airlines is the marketing carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;. (optional)
     * @param bool $nonstop Setting this to true will find only flights that do not require the passenger to change from one flight to another (optional, default to false)
     * @param int $max_price Maximum price of trips to find in the result set, in USD (US dollars) unless some other currency code is specified. By default, no limit is applied (optional, default to 980)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $travel_class Searches for results where the majority of the itinerary flight time should be in a the specified cabin class or higher (optional, default to ECONOMY)
     * @param int $number_of_results The number of results to display. This will not be strictly interpreted but used as a guideline to display a useful number of results. By default, the number of results is dynamically determined. A maximum of 250 results will be displayed. (optional, default to 5)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LowFareSearchResponse
     */
    public function flightLowFareSearch($apikey, $origin, $destination, $departure_date, $return_date = '2017-08-28', $arrive_by = '2017-08-25T16:00', $return_by = '2017-08-28T08:00', $adults = '1', $children = '0', $infants = '0', $include_airlines = null, $exclude_airlines = null, $nonstop = 'false', $max_price = '980', $currency = 'USD', $travel_class = 'ECONOMY', $number_of_results = '5')
    {
        list($response) = $this->flightLowFareSearchWithHttpInfo($apikey, $origin, $destination, $departure_date, $return_date, $arrive_by, $return_by, $adults, $children, $infants, $include_airlines, $exclude_airlines, $nonstop, $max_price, $currency, $travel_class, $number_of_results);
        return $response;
    }

    /**
     * Operation flightLowFareSearchWithHttpInfo
     *
     * Flight Low-Fare Search - Find the cheapest one way or return itineraries and fares between two airports at specific dates.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin City code from which the traveler will depart. See the location and airport interfaces for more information. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (required)
     * @param string $departure_date The date on which the traveler will depart from the origin to go to the destination. You can specify a date range of up to 2 days. For a larger date range, use the Extensive Search. Dates are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-dd date format and separated by --. (required)
     * @param string $return_date The date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, the search will find only one-way trips. If this, or the return_by parameter are specified, only return trips are found. You can specify a date range of up to 2 days. (optional, default to 2017-08-28)
     * @param string $arrive_by The datetime by which the outbound flight should arrive, based on local time at the destination airport.  Date-times are specified in the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO 8601&lt;/a&gt; yyyy-MM-ddTHH:mm date format (optional, default to 2017-08-25T16:00)
     * @param string $return_by The time by which the inbound flight should arrive, based on local time at the airport specified as the origin parameter (optional, default to 2017-08-28T08:00)
     * @param int $adults The number of adult (age 12 and over) passengers traveling on this flight. (optional, default to 1)
     * @param int $children The number of child (younger than age 12 on date of departure) passengers traveling on this flight who will each have their own separate seat (optional, default to 0)
     * @param int $infants The number of infant (younger than age 2 on date of departure) passengers traveling on this flight. Infants travel in the lap of an adult passenger, and thus the number of infants must not exceed the number of adults. (optional, default to 0)
     * @param string[] $include_airlines If specified, all results will include at least one flight where one or more of these airlines is the marketing carrier. This behaves as an OR function. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;. (optional)
     * @param string[] $exclude_airlines If specified, no results will include any flights where any of these airlines is the marketing carrier. Airlines are specified using &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Airline_codes\&quot;&gt;IATA airline code&lt;/a&gt;s&lt;/a&gt;. (optional)
     * @param bool $nonstop Setting this to true will find only flights that do not require the passenger to change from one flight to another (optional, default to false)
     * @param int $max_price Maximum price of trips to find in the result set, in USD (US dollars) unless some other currency code is specified. By default, no limit is applied (optional, default to 980)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $travel_class Searches for results where the majority of the itinerary flight time should be in a the specified cabin class or higher (optional, default to ECONOMY)
     * @param int $number_of_results The number of results to display. This will not be strictly interpreted but used as a guideline to display a useful number of results. By default, the number of results is dynamically determined. A maximum of 250 results will be displayed. (optional, default to 5)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LowFareSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function flightLowFareSearchWithHttpInfo($apikey, $origin, $destination, $departure_date, $return_date = '2017-08-28', $arrive_by = '2017-08-25T16:00', $return_by = '2017-08-28T08:00', $adults = '1', $children = '0', $infants = '0', $include_airlines = null, $exclude_airlines = null, $nonstop = 'false', $max_price = '980', $currency = 'USD', $travel_class = 'ECONOMY', $number_of_results = '5')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling flightLowFareSearch');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling flightLowFareSearch');
        }
        // verify the required parameter 'destination' is set
        if ($destination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination when calling flightLowFareSearch');
        }
        // verify the required parameter 'departure_date' is set
        if ($departure_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departure_date when calling flightLowFareSearch');
        }
        // parse inputs
        $resourcePath = "/flights/low-fare-search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['departure_date'] = $this->apiClient->getSerializer()->toQueryValue($departure_date);
        }
        // query params
        if ($return_date !== null) {
            $queryParams['return_date'] = $this->apiClient->getSerializer()->toQueryValue($return_date);
        }
        // query params
        if ($arrive_by !== null) {
            $queryParams['arrive_by'] = $this->apiClient->getSerializer()->toQueryValue($arrive_by);
        }
        // query params
        if ($return_by !== null) {
            $queryParams['return_by'] = $this->apiClient->getSerializer()->toQueryValue($return_by);
        }
        // query params
        if ($adults !== null) {
            $queryParams['adults'] = $this->apiClient->getSerializer()->toQueryValue($adults);
        }
        // query params
        if ($children !== null) {
            $queryParams['children'] = $this->apiClient->getSerializer()->toQueryValue($children);
        }
        // query params
        if ($infants !== null) {
            $queryParams['infants'] = $this->apiClient->getSerializer()->toQueryValue($infants);
        }
        // query params
        if (is_array($include_airlines)) {
            $include_airlines = $this->apiClient->getSerializer()->serializeCollection($include_airlines, 'csv', true);
        }
        if ($include_airlines !== null) {
            $queryParams['include_airlines'] = $this->apiClient->getSerializer()->toQueryValue($include_airlines);
        }
        // query params
        if (is_array($exclude_airlines)) {
            $exclude_airlines = $this->apiClient->getSerializer()->serializeCollection($exclude_airlines, 'csv', true);
        }
        if ($exclude_airlines !== null) {
            $queryParams['exclude_airlines'] = $this->apiClient->getSerializer()->toQueryValue($exclude_airlines);
        }
        // query params
        if ($nonstop !== null) {
            $queryParams['nonstop'] = $this->apiClient->getSerializer()->toQueryValue($nonstop);
        }
        // query params
        if ($max_price !== null) {
            $queryParams['max_price'] = $this->apiClient->getSerializer()->toQueryValue($max_price);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($travel_class !== null) {
            $queryParams['travel_class'] = $this->apiClient->getSerializer()->toQueryValue($travel_class);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LowFareSearchResponse',
                '/flights/low-fare-search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LowFareSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LowFareSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flightTrafficAPI
     *
     * Flight Traffic API - Find the true origin and destination traffic summary between two journey points over a specified period. This can help you answer questions like \"What cities are people coming from to visit Los Angeles between January through April of 2015\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $period Range of periods for which flight traffic information is required. Ranges are inclusive and ranges of months will apply from the start to the end of the month. If just a single period is specified, only that period will be displayed. Only periods from 2011-01 up to previous month of the current year are valid. Future periods are not supported. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going. (optional, default to LAX)
     * @param int $number_of_results_per_period The maximum number of destinations to return for each period. Destinations are ordered by dates and number of travelers. The maximum number of destinations per period returned is 50 (optional, default to 5)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\FlightTrafficSearchResult[]
     */
    public function flightTrafficAPI($apikey, $period, $origin, $destination = 'LAX', $number_of_results_per_period = '5')
    {
        list($response) = $this->flightTrafficAPIWithHttpInfo($apikey, $period, $origin, $destination, $number_of_results_per_period);
        return $response;
    }

    /**
     * Operation flightTrafficAPIWithHttpInfo
     *
     * Flight Traffic API - Find the true origin and destination traffic summary between two journey points over a specified period. This can help you answer questions like \"What cities are people coming from to visit Los Angeles between January through April of 2015\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $period Range of periods for which flight traffic information is required. Ranges are inclusive and ranges of months will apply from the start to the end of the month. If just a single period is specified, only that period will be displayed. Only periods from 2011-01 up to previous month of the current year are valid. Future periods are not supported. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going. (optional, default to LAX)
     * @param int $number_of_results_per_period The maximum number of destinations to return for each period. Destinations are ordered by dates and number of travelers. The maximum number of destinations per period returned is 50 (optional, default to 5)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\FlightTrafficSearchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function flightTrafficAPIWithHttpInfo($apikey, $period, $origin, $destination = 'LAX', $number_of_results_per_period = '5')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling flightTrafficAPI');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling flightTrafficAPI');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling flightTrafficAPI');
        }
        // parse inputs
        $resourcePath = "/travel-intelligence/flight-traffic";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = $this->apiClient->getSerializer()->toQueryValue($period);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($number_of_results_per_period !== null) {
            $queryParams['number_of_results_per_period'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results_per_period);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FlightTrafficSearchResult[]',
                '/travel-intelligence/flight-traffic'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FlightTrafficSearchResult[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FlightTrafficSearchResult[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hotelAirportSearch
     *
     * Hotel Airport Search - Locate the cheapest available rooms near a given airport, for a given stay period. This API is ideal if you want to connect flight and hotels. Provide an IATA airport code, as well as the check-in and check-out dates, and get a list of up to 140 properties (names, codes, image, amenities) with their locations and rates. Optional parameters such as currency and maximum rates, amenities or hotel chain codes are also available and can be used to narrow down the results. More optional parameters such as show_sold_out & rooms can be used to show sold out rooms and all available rooms.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $location &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA airport code&lt;/a&gt; for hotel availability is required requested. (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param int $radius Radius around the center to look for hotels in kilometers (km). (optional, default to 42)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $chain Narrows the hotel search to a given hotel provider. The hotel chain is indicated by the first two characters of the property code. (optional, default to 6C)
     * @param float $max_rate The maximum amount per night that any hotel in the shopping response should cost. This is calculated by dividing the total price of the stay for the given dates by the number of nights specified falling between the check_in and check_out dates. (optional, default to 500)
     * @param int $number_of_results The maximum number of hotels to return in the results set. Hotels are ordered by total price, so if more than the given maximum number of hotels are available, only the cheapest options are returned. (optional, default to 20)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to false)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @param string[] $amenity Hotel &lt;a href&#x3D;\&quot;hotels-api-supported-amenities-filter\&quot;&gt;amenities filter&lt;/a&gt; to search narrow down hotels with certain amenities. For example&amp;colon; amenity&#x3D;POOL. (Note: multiple amenities can be used in searches: amenity&#x3D;PARKING&amp;amenity&#x3D;RESTAURANT&amp;amenity&#x3D;PETS_ALLOWED). (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HotelSearchResponse
     */
    public function hotelAirportSearch($apikey, $location, $check_in, $check_out, $radius = '42', $lang = 'EN', $currency = 'USD', $chain = '6C', $max_rate = '500', $number_of_results = '20', $all_rooms = 'false', $show_sold_out = 'false', $amenity = null)
    {
        list($response) = $this->hotelAirportSearchWithHttpInfo($apikey, $location, $check_in, $check_out, $radius, $lang, $currency, $chain, $max_rate, $number_of_results, $all_rooms, $show_sold_out, $amenity);
        return $response;
    }

    /**
     * Operation hotelAirportSearchWithHttpInfo
     *
     * Hotel Airport Search - Locate the cheapest available rooms near a given airport, for a given stay period. This API is ideal if you want to connect flight and hotels. Provide an IATA airport code, as well as the check-in and check-out dates, and get a list of up to 140 properties (names, codes, image, amenities) with their locations and rates. Optional parameters such as currency and maximum rates, amenities or hotel chain codes are also available and can be used to narrow down the results. More optional parameters such as show_sold_out & rooms can be used to show sold out rooms and all available rooms.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $location &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA airport code&lt;/a&gt; for hotel availability is required requested. (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param int $radius Radius around the center to look for hotels in kilometers (km). (optional, default to 42)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $chain Narrows the hotel search to a given hotel provider. The hotel chain is indicated by the first two characters of the property code. (optional, default to 6C)
     * @param float $max_rate The maximum amount per night that any hotel in the shopping response should cost. This is calculated by dividing the total price of the stay for the given dates by the number of nights specified falling between the check_in and check_out dates. (optional, default to 500)
     * @param int $number_of_results The maximum number of hotels to return in the results set. Hotels are ordered by total price, so if more than the given maximum number of hotels are available, only the cheapest options are returned. (optional, default to 20)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to false)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @param string[] $amenity Hotel &lt;a href&#x3D;\&quot;hotels-api-supported-amenities-filter\&quot;&gt;amenities filter&lt;/a&gt; to search narrow down hotels with certain amenities. For example&amp;colon; amenity&#x3D;POOL. (Note: multiple amenities can be used in searches: amenity&#x3D;PARKING&amp;amenity&#x3D;RESTAURANT&amp;amenity&#x3D;PETS_ALLOWED). (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HotelSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hotelAirportSearchWithHttpInfo($apikey, $location, $check_in, $check_out, $radius = '42', $lang = 'EN', $currency = 'USD', $chain = '6C', $max_rate = '500', $number_of_results = '20', $all_rooms = 'false', $show_sold_out = 'false', $amenity = null)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling hotelAirportSearch');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling hotelAirportSearch');
        }
        // verify the required parameter 'check_in' is set
        if ($check_in === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_in when calling hotelAirportSearch');
        }
        // verify the required parameter 'check_out' is set
        if ($check_out === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_out when calling hotelAirportSearch');
        }
        // parse inputs
        $resourcePath = "/hotels/search-airport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }
        // query params
        if ($check_in !== null) {
            $queryParams['check_in'] = $this->apiClient->getSerializer()->toQueryValue($check_in);
        }
        // query params
        if ($check_out !== null) {
            $queryParams['check_out'] = $this->apiClient->getSerializer()->toQueryValue($check_out);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($chain !== null) {
            $queryParams['chain'] = $this->apiClient->getSerializer()->toQueryValue($chain);
        }
        // query params
        if ($max_rate !== null) {
            $queryParams['max_rate'] = $this->apiClient->getSerializer()->toQueryValue($max_rate);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }
        // query params
        if ($all_rooms !== null) {
            $queryParams['all_rooms'] = $this->apiClient->getSerializer()->toQueryValue($all_rooms);
        }
        // query params
        if ($show_sold_out !== null) {
            $queryParams['show_sold_out'] = $this->apiClient->getSerializer()->toQueryValue($show_sold_out);
        }
        // query params
        if (is_array($amenity)) {
            $amenity = $this->apiClient->getSerializer()->serializeCollection($amenity, 'multi', true);
        }
        if ($amenity !== null) {
            $queryParams['amenity'] = $this->apiClient->getSerializer()->toQueryValue($amenity);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HotelSearchResponse',
                '/hotels/search-airport'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HotelSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HotelSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hotelGeosearchByBox
     *
     * Hotel Geosearch by box - Locate the cheapest available rooms within a given rectangular region for a given stay period. It's ideal for displaying results on a map.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $south_west_corner The coordinates of the south-west corner of the search box. (required)
     * @param string $north_east_corner The coordinates of the north-east corner of the search box. (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $chain Narrows the hotel search to a given hotel provider. The hotel chain is indicated by the first two characters of the property code. (optional, default to 6C)
     * @param float $max_rate The maximum amount per night that any hotel in the shopping response should cost. This is calculated by dividing the total price of the stay for the given dates by the number of nights specified falling between the check_in and check_out dates. (optional, default to 500)
     * @param int $number_of_results The maximum number of hotels to return in the results set. Hotels are ordered by total price, so if more than the given maximum number of hotels are available, only the cheapest options are returned. (optional, default to 20)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to false)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @param string[] $amenity Hotel &lt;a href&#x3D;\&quot;hotels-api-supported-amenities-filter\&quot;&gt;amenities filter&lt;/a&gt; to search narrow down hotels with certain amenities. For example&amp;colon; amenity&#x3D;POOL. (Note: multiple amenities can be used in searches: amenity&#x3D;PARKING&amp;amenity&#x3D;RESTAURANT&amp;amenity&#x3D;PETS_ALLOWED). (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HotelSearchResponse
     */
    public function hotelGeosearchByBox($apikey, $south_west_corner, $north_east_corner, $check_in, $check_out, $lang = 'EN', $currency = 'USD', $chain = '6C', $max_rate = '500', $number_of_results = '20', $all_rooms = 'false', $show_sold_out = 'false', $amenity = null)
    {
        list($response) = $this->hotelGeosearchByBoxWithHttpInfo($apikey, $south_west_corner, $north_east_corner, $check_in, $check_out, $lang, $currency, $chain, $max_rate, $number_of_results, $all_rooms, $show_sold_out, $amenity);
        return $response;
    }

    /**
     * Operation hotelGeosearchByBoxWithHttpInfo
     *
     * Hotel Geosearch by box - Locate the cheapest available rooms within a given rectangular region for a given stay period. It's ideal for displaying results on a map.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $south_west_corner The coordinates of the south-west corner of the search box. (required)
     * @param string $north_east_corner The coordinates of the north-east corner of the search box. (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $chain Narrows the hotel search to a given hotel provider. The hotel chain is indicated by the first two characters of the property code. (optional, default to 6C)
     * @param float $max_rate The maximum amount per night that any hotel in the shopping response should cost. This is calculated by dividing the total price of the stay for the given dates by the number of nights specified falling between the check_in and check_out dates. (optional, default to 500)
     * @param int $number_of_results The maximum number of hotels to return in the results set. Hotels are ordered by total price, so if more than the given maximum number of hotels are available, only the cheapest options are returned. (optional, default to 20)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to false)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @param string[] $amenity Hotel &lt;a href&#x3D;\&quot;hotels-api-supported-amenities-filter\&quot;&gt;amenities filter&lt;/a&gt; to search narrow down hotels with certain amenities. For example&amp;colon; amenity&#x3D;POOL. (Note: multiple amenities can be used in searches: amenity&#x3D;PARKING&amp;amenity&#x3D;RESTAURANT&amp;amenity&#x3D;PETS_ALLOWED). (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HotelSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hotelGeosearchByBoxWithHttpInfo($apikey, $south_west_corner, $north_east_corner, $check_in, $check_out, $lang = 'EN', $currency = 'USD', $chain = '6C', $max_rate = '500', $number_of_results = '20', $all_rooms = 'false', $show_sold_out = 'false', $amenity = null)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling hotelGeosearchByBox');
        }
        // verify the required parameter 'south_west_corner' is set
        if ($south_west_corner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $south_west_corner when calling hotelGeosearchByBox');
        }
        // verify the required parameter 'north_east_corner' is set
        if ($north_east_corner === null) {
            throw new \InvalidArgumentException('Missing the required parameter $north_east_corner when calling hotelGeosearchByBox');
        }
        // verify the required parameter 'check_in' is set
        if ($check_in === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_in when calling hotelGeosearchByBox');
        }
        // verify the required parameter 'check_out' is set
        if ($check_out === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_out when calling hotelGeosearchByBox');
        }
        // parse inputs
        $resourcePath = "/hotels/search-box";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($south_west_corner !== null) {
            $queryParams['south_west_corner'] = $this->apiClient->getSerializer()->toQueryValue($south_west_corner);
        }
        // query params
        if ($north_east_corner !== null) {
            $queryParams['north_east_corner'] = $this->apiClient->getSerializer()->toQueryValue($north_east_corner);
        }
        // query params
        if ($check_in !== null) {
            $queryParams['check_in'] = $this->apiClient->getSerializer()->toQueryValue($check_in);
        }
        // query params
        if ($check_out !== null) {
            $queryParams['check_out'] = $this->apiClient->getSerializer()->toQueryValue($check_out);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($chain !== null) {
            $queryParams['chain'] = $this->apiClient->getSerializer()->toQueryValue($chain);
        }
        // query params
        if ($max_rate !== null) {
            $queryParams['max_rate'] = $this->apiClient->getSerializer()->toQueryValue($max_rate);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }
        // query params
        if ($all_rooms !== null) {
            $queryParams['all_rooms'] = $this->apiClient->getSerializer()->toQueryValue($all_rooms);
        }
        // query params
        if ($show_sold_out !== null) {
            $queryParams['show_sold_out'] = $this->apiClient->getSerializer()->toQueryValue($show_sold_out);
        }
        // query params
        if (is_array($amenity)) {
            $amenity = $this->apiClient->getSerializer()->serializeCollection($amenity, 'multi', true);
        }
        if ($amenity !== null) {
            $queryParams['amenity'] = $this->apiClient->getSerializer()->toQueryValue($amenity);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HotelSearchResponse',
                '/hotels/search-box'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HotelSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HotelSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hotelGeosearchByCircle
     *
     * Hotel Geosearch by Circle API - Locate the cheapest available rooms within a given radius of a defined point for a given stay period.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param float $latitude Latitude of the center of the search. (required)
     * @param float $longitude Longitude of the center of the search. (required)
     * @param int $radius Radius around the center to look for hotels in kilometers (km). (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $chain Narrows the hotel search to a given hotel provider. The hotel chain is indicated by the first two characters of the property code. (optional, default to 6C)
     * @param float $max_rate The maximum amount per night that any hotel in the shopping response should cost. This is calculated by dividing the total price of the stay for the given dates by the number of nights specified falling between the check_in and check_out dates. (optional, default to 500)
     * @param int $number_of_results The maximum number of hotels to return in the results set. Hotels are ordered by total price, so if more than the given maximum number of hotels are available, only the cheapest options are returned. (optional, default to 20)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to false)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @param string[] $amenity Hotel &lt;a href&#x3D;\&quot;hotels-api-supported-amenities-filter\&quot;&gt;amenities filter&lt;/a&gt; to search narrow down hotels with certain amenities. For example&amp;colon; amenity&#x3D;POOL. (Note: multiple amenities can be used in searches: amenity&#x3D;PARKING&amp;amenity&#x3D;RESTAURANT&amp;amenity&#x3D;PETS_ALLOWED). (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HotelSearchResponse
     */
    public function hotelGeosearchByCircle($apikey, $latitude, $longitude, $radius, $check_in, $check_out, $lang = 'EN', $currency = 'USD', $chain = '6C', $max_rate = '500', $number_of_results = '20', $all_rooms = 'false', $show_sold_out = 'false', $amenity = null)
    {
        list($response) = $this->hotelGeosearchByCircleWithHttpInfo($apikey, $latitude, $longitude, $radius, $check_in, $check_out, $lang, $currency, $chain, $max_rate, $number_of_results, $all_rooms, $show_sold_out, $amenity);
        return $response;
    }

    /**
     * Operation hotelGeosearchByCircleWithHttpInfo
     *
     * Hotel Geosearch by Circle API - Locate the cheapest available rooms within a given radius of a defined point for a given stay period.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param float $latitude Latitude of the center of the search. (required)
     * @param float $longitude Longitude of the center of the search. (required)
     * @param int $radius Radius around the center to look for hotels in kilometers (km). (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param string $chain Narrows the hotel search to a given hotel provider. The hotel chain is indicated by the first two characters of the property code. (optional, default to 6C)
     * @param float $max_rate The maximum amount per night that any hotel in the shopping response should cost. This is calculated by dividing the total price of the stay for the given dates by the number of nights specified falling between the check_in and check_out dates. (optional, default to 500)
     * @param int $number_of_results The maximum number of hotels to return in the results set. Hotels are ordered by total price, so if more than the given maximum number of hotels are available, only the cheapest options are returned. (optional, default to 20)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to false)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @param string[] $amenity Hotel &lt;a href&#x3D;\&quot;hotels-api-supported-amenities-filter\&quot;&gt;amenities filter&lt;/a&gt; to search narrow down hotels with certain amenities. For example&amp;colon; amenity&#x3D;POOL. (Note: multiple amenities can be used in searches: amenity&#x3D;PARKING&amp;amenity&#x3D;RESTAURANT&amp;amenity&#x3D;PETS_ALLOWED). (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HotelSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hotelGeosearchByCircleWithHttpInfo($apikey, $latitude, $longitude, $radius, $check_in, $check_out, $lang = 'EN', $currency = 'USD', $chain = '6C', $max_rate = '500', $number_of_results = '20', $all_rooms = 'false', $show_sold_out = 'false', $amenity = null)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling hotelGeosearchByCircle');
        }
        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling hotelGeosearchByCircle');
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling hotelGeosearchByCircle');
        }
        // verify the required parameter 'radius' is set
        if ($radius === null) {
            throw new \InvalidArgumentException('Missing the required parameter $radius when calling hotelGeosearchByCircle');
        }
        // verify the required parameter 'check_in' is set
        if ($check_in === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_in when calling hotelGeosearchByCircle');
        }
        // verify the required parameter 'check_out' is set
        if ($check_out === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_out when calling hotelGeosearchByCircle');
        }
        // parse inputs
        $resourcePath = "/hotels/search-circle";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($check_in !== null) {
            $queryParams['check_in'] = $this->apiClient->getSerializer()->toQueryValue($check_in);
        }
        // query params
        if ($check_out !== null) {
            $queryParams['check_out'] = $this->apiClient->getSerializer()->toQueryValue($check_out);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($chain !== null) {
            $queryParams['chain'] = $this->apiClient->getSerializer()->toQueryValue($chain);
        }
        // query params
        if ($max_rate !== null) {
            $queryParams['max_rate'] = $this->apiClient->getSerializer()->toQueryValue($max_rate);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }
        // query params
        if ($all_rooms !== null) {
            $queryParams['all_rooms'] = $this->apiClient->getSerializer()->toQueryValue($all_rooms);
        }
        // query params
        if ($show_sold_out !== null) {
            $queryParams['show_sold_out'] = $this->apiClient->getSerializer()->toQueryValue($show_sold_out);
        }
        // query params
        if (is_array($amenity)) {
            $amenity = $this->apiClient->getSerializer()->serializeCollection($amenity, 'multi', true);
        }
        if ($amenity !== null) {
            $queryParams['amenity'] = $this->apiClient->getSerializer()->toQueryValue($amenity);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HotelSearchResponse',
                '/hotels/search-circle'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HotelSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HotelSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hotelPropertyCodeSearch
     *
     * Hotel Property Code Search - Find out more room and rate information once you have found your preferred hotel.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $property_code A Hotel property code based on 2 letter chain code + 3 letter &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city + 3 char property unique id. (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to true)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HotelPropertyResponse
     */
    public function hotelPropertyCodeSearch($apikey, $property_code, $check_in, $check_out, $lang = 'EN', $currency = 'USD', $all_rooms = 'true', $show_sold_out = 'false')
    {
        list($response) = $this->hotelPropertyCodeSearchWithHttpInfo($apikey, $property_code, $check_in, $check_out, $lang, $currency, $all_rooms, $show_sold_out);
        return $response;
    }

    /**
     * Operation hotelPropertyCodeSearchWithHttpInfo
     *
     * Hotel Property Code Search - Find out more room and rate information once you have found your preferred hotel.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $property_code A Hotel property code based on 2 letter chain code + 3 letter &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city + 3 char property unique id. (required)
     * @param string $check_in Date on which the guest will begin their stay in the hotel. Past availability is not displayed, future availability becomes less useful from about 6 months from the current date. (required)
     * @param string $check_out Date on which the guest will end their stay in the hotel. (required)
     * @param string $lang The preferred language of the content related to each hotel. Content will be returned in this language if available. (optional, default to EN)
     * @param string $currency The preferred &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_4217\&quot;&gt;currency&lt;/a&gt; for the results (optional, default to USD)
     * @param bool $all_rooms This option if enabled will return all hotel room rates, not just the lowest room rate. Note: This will have an impact on the response time due to the larger messages returned. (optional, default to true)
     * @param bool $show_sold_out This option if enabled will return hotel names and addresses even if rooms are sold out (closed properties) (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HotelPropertyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function hotelPropertyCodeSearchWithHttpInfo($apikey, $property_code, $check_in, $check_out, $lang = 'EN', $currency = 'USD', $all_rooms = 'true', $show_sold_out = 'false')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling hotelPropertyCodeSearch');
        }
        // verify the required parameter 'property_code' is set
        if ($property_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $property_code when calling hotelPropertyCodeSearch');
        }
        // verify the required parameter 'check_in' is set
        if ($check_in === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_in when calling hotelPropertyCodeSearch');
        }
        // verify the required parameter 'check_out' is set
        if ($check_out === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_out when calling hotelPropertyCodeSearch');
        }
        // parse inputs
        $resourcePath = "/hotels/{property_code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($check_in !== null) {
            $queryParams['check_in'] = $this->apiClient->getSerializer()->toQueryValue($check_in);
        }
        // query params
        if ($check_out !== null) {
            $queryParams['check_out'] = $this->apiClient->getSerializer()->toQueryValue($check_out);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($all_rooms !== null) {
            $queryParams['all_rooms'] = $this->apiClient->getSerializer()->toQueryValue($all_rooms);
        }
        // query params
        if ($show_sold_out !== null) {
            $queryParams['show_sold_out'] = $this->apiClient->getSerializer()->toQueryValue($show_sold_out);
        }
        // path params
        if ($property_code !== null) {
            $resourcePath = str_replace(
                "{" . "property_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($property_code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HotelPropertyResponse',
                '/hotels/{property_code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HotelPropertyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HotelPropertyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locationInformation
     *
     * Location Information - Find more information about any IATA city or airport location code. With this API, you can find information such as city and airport names and locations, as well as information on timezones and airport usage.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $code IATA location code for which further information is required (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LocationResponse
     */
    public function locationInformation($apikey, $code)
    {
        list($response) = $this->locationInformationWithHttpInfo($apikey, $code);
        return $response;
    }

    /**
     * Operation locationInformationWithHttpInfo
     *
     * Location Information - Find more information about any IATA city or airport location code. With this API, you can find information such as city and airport names and locations, as well as information on timezones and airport usage.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $code IATA location code for which further information is required (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LocationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationInformationWithHttpInfo($apikey, $code)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling locationInformation');
        }
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling locationInformation');
        }
        // parse inputs
        $resourcePath = "/location/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LocationResponse',
                '/location/{code}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LocationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LocationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation nearestRelevantAirport
     *
     * Nearest Relevant Airport - Find the most useful nearby airport to a given location.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $latitude Latitude location to be at the center of your search circle. (required)
     * @param string $longitude Longitude location to be at the center of your search circle. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\NearestAirport[]
     */
    public function nearestRelevantAirport($apikey, $latitude, $longitude)
    {
        list($response) = $this->nearestRelevantAirportWithHttpInfo($apikey, $latitude, $longitude);
        return $response;
    }

    /**
     * Operation nearestRelevantAirportWithHttpInfo
     *
     * Nearest Relevant Airport - Find the most useful nearby airport to a given location.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $latitude Latitude location to be at the center of your search circle. (required)
     * @param string $longitude Longitude location to be at the center of your search circle. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\NearestAirport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function nearestRelevantAirportWithHttpInfo($apikey, $latitude, $longitude)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling nearestRelevantAirport');
        }
        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling nearestRelevantAirport');
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling nearestRelevantAirport');
        }
        // parse inputs
        $resourcePath = "/airports/nearest-relevant";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\NearestAirport[]',
                '/airports/nearest-relevant'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\NearestAirport[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\NearestAirport[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation railStationAutocomplete
     *
     * Rail Station Autocomplete - Transform user input into a unique rail station code. Currently only French and Italian stations are supported.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $term Search term that should represent some part of a station name. Not case sensitive, may be blank. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RailStationAutocompleteResponse[]
     */
    public function railStationAutocomplete($apikey, $term)
    {
        list($response) = $this->railStationAutocompleteWithHttpInfo($apikey, $term);
        return $response;
    }

    /**
     * Operation railStationAutocompleteWithHttpInfo
     *
     * Rail Station Autocomplete - Transform user input into a unique rail station code. Currently only French and Italian stations are supported.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $term Search term that should represent some part of a station name. Not case sensitive, may be blank. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RailStationAutocompleteResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function railStationAutocompleteWithHttpInfo($apikey, $term)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling railStationAutocomplete');
        }
        // verify the required parameter 'term' is set
        if ($term === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term when calling railStationAutocomplete');
        }
        // parse inputs
        $resourcePath = "/rail-stations/autocomplete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = $this->apiClient->getSerializer()->toQueryValue($term);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RailStationAutocompleteResponse[]',
                '/rail-stations/autocomplete'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RailStationAutocompleteResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RailStationAutocompleteResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation railStationInformation
     *
     * Rail-Station Information - Retrieve the rail station information corresponding to an Amadeus UIC rail station ID. Currently only French and Italian stations are supported.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $id Station ID for which further information is required. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RailStationResponse
     */
    public function railStationInformation($apikey, $id)
    {
        list($response) = $this->railStationInformationWithHttpInfo($apikey, $id);
        return $response;
    }

    /**
     * Operation railStationInformationWithHttpInfo
     *
     * Rail-Station Information - Retrieve the rail station information corresponding to an Amadeus UIC rail station ID. Currently only French and Italian stations are supported.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $id Station ID for which further information is required. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RailStationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function railStationInformationWithHttpInfo($apikey, $id)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling railStationInformation');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling railStationInformation');
        }
        // parse inputs
        $resourcePath = "/rail-station/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RailStationResponse',
                '/rail-station/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RailStationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RailStationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation topFlightDestinations
     *
     * Top Flight Destinations - Find the most popular flight destinations from an origin during a period. This can help you answer questions like \"Where are most people going to from Paris during the month of September?\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $period Period, in month of the year (YYYY-MM), when consumers are traveling. Only periods from 2011-01 up to previous month of the current year are valid. Future dates are not supported. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. (required)
     * @param int $number_of_results The maximum number of destinations to return in the results set. Destinations are ordered by number of travelers. The maximum number of destinations returned is 50 (optional, default to 10)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TopDestinationsSearchResponse
     */
    public function topFlightDestinations($apikey, $period, $origin, $number_of_results = '10')
    {
        list($response) = $this->topFlightDestinationsWithHttpInfo($apikey, $period, $origin, $number_of_results);
        return $response;
    }

    /**
     * Operation topFlightDestinationsWithHttpInfo
     *
     * Top Flight Destinations - Find the most popular flight destinations from an origin during a period. This can help you answer questions like \"Where are most people going to from Paris during the month of September?\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $period Period, in month of the year (YYYY-MM), when consumers are traveling. Only periods from 2011-01 up to previous month of the current year are valid. Future dates are not supported. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. (required)
     * @param int $number_of_results The maximum number of destinations to return in the results set. Destinations are ordered by number of travelers. The maximum number of destinations returned is 50 (optional, default to 10)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TopDestinationsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function topFlightDestinationsWithHttpInfo($apikey, $period, $origin, $number_of_results = '10')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling topFlightDestinations');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling topFlightDestinations');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling topFlightDestinations');
        }
        // parse inputs
        $resourcePath = "/travel-intelligence/top-destinations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = $this->apiClient->getSerializer()->toQueryValue($period);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TopDestinationsSearchResponse',
                '/travel-intelligence/top-destinations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TopDestinationsSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TopDestinationsSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation topFlightSearches
     *
     * Top Flight Searches - Find the most popular flight searches from an origin in a during given search period. This can help you answer questions like \"Where are people looking to travel from Paris during the month of September?\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $period Period of date (month or year) when consumers are searching to travel. Use YYYY-MM for month or YYYY for year. Only periods from year 2011-01 up to current year, previous month are valid. Future dates are not supported. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. (required)
     * @param string $country 2-letter IATA country code of the country where the search queries originates from. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (optional, default to LON)
     * @param int $number_of_results The maximum number of destinations to return in the results set. Destinations are ordered by number of searches. The maximum number of destinations returned is 50 (optional, default to 10)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TopSearchesSearchResponse
     */
    public function topFlightSearches($apikey, $period, $origin, $country, $destination = 'LON', $number_of_results = '10')
    {
        list($response) = $this->topFlightSearchesWithHttpInfo($apikey, $period, $origin, $country, $destination, $number_of_results);
        return $response;
    }

    /**
     * Operation topFlightSearchesWithHttpInfo
     *
     * Top Flight Searches - Find the most popular flight searches from an origin in a during given search period. This can help you answer questions like \"Where are people looking to travel from Paris during the month of September?\"
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $period Period of date (month or year) when consumers are searching to travel. Use YYYY-MM for month or YYYY for year. Only periods from year 2011-01 up to current year, previous month are valid. Future dates are not supported. (required)
     * @param string $origin &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city from which the traveler will depart. (required)
     * @param string $country 2-letter IATA country code of the country where the search queries originates from. (required)
     * @param string $destination &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\&quot;&gt;IATA code&lt;/a&gt; of the city to which the traveler is going (optional, default to LON)
     * @param int $number_of_results The maximum number of destinations to return in the results set. Destinations are ordered by number of searches. The maximum number of destinations returned is 50 (optional, default to 10)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TopSearchesSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function topFlightSearchesWithHttpInfo($apikey, $period, $origin, $country, $destination = 'LON', $number_of_results = '10')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling topFlightSearches');
        }
        // verify the required parameter 'period' is set
        if ($period === null) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling topFlightSearches');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling topFlightSearches');
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling topFlightSearches');
        }
        // parse inputs
        $resourcePath = "/travel-intelligence/top-searches";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = $this->apiClient->getSerializer()->toQueryValue($period);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TopSearchesSearchResponse',
                '/travel-intelligence/top-searches'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TopSearchesSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TopSearchesSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trainExtensiveSearch
     *
     * Train Extensive Search - Provides multi-day availability and a variety of schedule and pricing options to travel to your destination instantly. Supports SNCF French trains only.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin Identifier of the rail station from which you would like to depart. (required)
     * @param string $destination Identifier of the rail station to which you would like to travel. (required)
     * @param string $departure_date The date or range of dates on which you would like to depart from the origin station to go to the destination. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExtensiveTrainSearchResponse
     */
    public function trainExtensiveSearch($apikey, $origin, $destination, $departure_date)
    {
        list($response) = $this->trainExtensiveSearchWithHttpInfo($apikey, $origin, $destination, $departure_date);
        return $response;
    }

    /**
     * Operation trainExtensiveSearchWithHttpInfo
     *
     * Train Extensive Search - Provides multi-day availability and a variety of schedule and pricing options to travel to your destination instantly. Supports SNCF French trains only.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin Identifier of the rail station from which you would like to depart. (required)
     * @param string $destination Identifier of the rail station to which you would like to travel. (required)
     * @param string $departure_date The date or range of dates on which you would like to depart from the origin station to go to the destination. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExtensiveTrainSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trainExtensiveSearchWithHttpInfo($apikey, $origin, $destination, $departure_date)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling trainExtensiveSearch');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling trainExtensiveSearch');
        }
        // verify the required parameter 'destination' is set
        if ($destination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination when calling trainExtensiveSearch');
        }
        // verify the required parameter 'departure_date' is set
        if ($departure_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departure_date when calling trainExtensiveSearch');
        }
        // parse inputs
        $resourcePath = "/trains/extensive-search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = $this->apiClient->getSerializer()->toQueryValue($destination);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['departure_date'] = $this->apiClient->getSerializer()->toQueryValue($departure_date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExtensiveTrainSearchResponse',
                '/trains/extensive-search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExtensiveTrainSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExtensiveTrainSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation trainScheduleSearch
     *
     * Train Schedule Search - Suggest destinations from your chosen departure station. Supports SNCF French Rail only.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin Identifier of the rail station where you would like to depart from. (required)
     * @param \DateTime $departure_date The date on which you would like to depart from the origin station to go to the destination. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TrainScheduleSearchResponse
     */
    public function trainScheduleSearch($apikey, $origin, $departure_date)
    {
        list($response) = $this->trainScheduleSearchWithHttpInfo($apikey, $origin, $departure_date);
        return $response;
    }

    /**
     * Operation trainScheduleSearchWithHttpInfo
     *
     * Train Schedule Search - Suggest destinations from your chosen departure station. Supports SNCF French Rail only.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $origin Identifier of the rail station where you would like to depart from. (required)
     * @param \DateTime $departure_date The date on which you would like to depart from the origin station to go to the destination. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TrainScheduleSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function trainScheduleSearchWithHttpInfo($apikey, $origin, $departure_date)
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling trainScheduleSearch');
        }
        // verify the required parameter 'origin' is set
        if ($origin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $origin when calling trainScheduleSearch');
        }
        // verify the required parameter 'departure_date' is set
        if ($departure_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departure_date when calling trainScheduleSearch');
        }
        // parse inputs
        $resourcePath = "/trains/schedule-search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['departure_date'] = $this->apiClient->getSerializer()->toQueryValue($departure_date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TrainScheduleSearchResponse',
                '/trains/schedule-search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TrainScheduleSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TrainScheduleSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation travelRecordRetrieve
     *
     * Travel Record Retrieve - Enable travelers to explore the details of their journeys stored in the Amadeus system using our Retrieve Travel Record API.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $record_locator The Amadeus identifier of the given travel record. Usually printed at the top of an itinerary or boarding pass. (required)
     * @param string $last_name The last name of any traveler in this record, as written on their identification used for travel. This is required to ensure that applications retrieving the record are acting on behalf of the customer. (required)
     * @param string $env Indicates the Amadeus system from which this record should be retrieved. (optional, default to TEST)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TravelRecordResponse
     */
    public function travelRecordRetrieve($apikey, $record_locator, $last_name, $env = 'TEST')
    {
        list($response) = $this->travelRecordRetrieveWithHttpInfo($apikey, $record_locator, $last_name, $env);
        return $response;
    }

    /**
     * Operation travelRecordRetrieveWithHttpInfo
     *
     * Travel Record Retrieve - Enable travelers to explore the details of their journeys stored in the Amadeus system using our Retrieve Travel Record API.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $record_locator The Amadeus identifier of the given travel record. Usually printed at the top of an itinerary or boarding pass. (required)
     * @param string $last_name The last name of any traveler in this record, as written on their identification used for travel. This is required to ensure that applications retrieving the record are acting on behalf of the customer. (required)
     * @param string $env Indicates the Amadeus system from which this record should be retrieved. (optional, default to TEST)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TravelRecordResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelRecordRetrieveWithHttpInfo($apikey, $record_locator, $last_name, $env = 'TEST')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling travelRecordRetrieve');
        }
        // verify the required parameter 'record_locator' is set
        if ($record_locator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_locator when calling travelRecordRetrieve');
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $last_name when calling travelRecordRetrieve');
        }
        // parse inputs
        $resourcePath = "/travel-record/{record_locator}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params
        if ($env !== null) {
            $queryParams['env'] = $this->apiClient->getSerializer()->toQueryValue($env);
        }
        // path params
        if ($record_locator !== null) {
            $resourcePath = str_replace(
                "{" . "record_locator" . "}",
                $this->apiClient->getSerializer()->toPathValue($record_locator),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TravelRecordResponse',
                '/travel-record/{record_locator}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TravelRecordResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TravelRecordResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation yapQCityNameSearch
     *
     * YapQ City Name Search - Find landmarks and attractions in a given city.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $city_name The name of the &lt;a href&#x3D;\&quot;http://yapq.io/cities.txt\&quot;&gt;supported city&lt;/a&gt; for which you are searching, in the selected language. (required)
     * @param string $lang The preferred language of the content related to each point of interest. Content will be returned in this language if available (optional, default to EN)
     * @param string $category Filters the resulting points_of_interest to include only results which have a least one category containing the given provided word. Good examples are &lt;em&gt;museum&lt;/em&gt;, &lt;em&gt;landmark&lt;/em&gt; or &lt;em&gt;church&lt;/em&gt; (optional, default to Museum)
     * @param bool $geonames Setting this to true includes only points of interest with a geonames ID (optional, default to false)
     * @param bool $vibes Includes content that doesn&#39;t correspond to an active physical place, but which gives the user some background information, or &lt;em&gt;vibe&lt;/em&gt; for the place they are visiting. An example of this may be information on an influential demolished building that used to exist at a certain location, or more information on a district of the city (optional, default to false)
     * @param bool $social_media Enabling this includes images from Instagram in the output results. This is disabled by default, since these images are often just pictures of people or food, which often have little relevance to the actual location (optional, default to false)
     * @param string $image_size The size of the images you&#39;d like to see in the response (optional, default to MEDIUM)
     * @param int $number_of_images Number of images to display (optional, default to 4)
     * @param int $number_of_results The maximum number of points of interest to return in the results set. This is a range from 1 to 100 (optional, default to 20)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PointsOfInterestResponse
     */
    public function yapQCityNameSearch($apikey, $city_name, $lang = 'EN', $category = 'Museum', $geonames = 'false', $vibes = 'false', $social_media = 'false', $image_size = 'MEDIUM', $number_of_images = '4', $number_of_results = '20')
    {
        list($response) = $this->yapQCityNameSearchWithHttpInfo($apikey, $city_name, $lang, $category, $geonames, $vibes, $social_media, $image_size, $number_of_images, $number_of_results);
        return $response;
    }

    /**
     * Operation yapQCityNameSearchWithHttpInfo
     *
     * YapQ City Name Search - Find landmarks and attractions in a given city.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param string $city_name The name of the &lt;a href&#x3D;\&quot;http://yapq.io/cities.txt\&quot;&gt;supported city&lt;/a&gt; for which you are searching, in the selected language. (required)
     * @param string $lang The preferred language of the content related to each point of interest. Content will be returned in this language if available (optional, default to EN)
     * @param string $category Filters the resulting points_of_interest to include only results which have a least one category containing the given provided word. Good examples are &lt;em&gt;museum&lt;/em&gt;, &lt;em&gt;landmark&lt;/em&gt; or &lt;em&gt;church&lt;/em&gt; (optional, default to Museum)
     * @param bool $geonames Setting this to true includes only points of interest with a geonames ID (optional, default to false)
     * @param bool $vibes Includes content that doesn&#39;t correspond to an active physical place, but which gives the user some background information, or &lt;em&gt;vibe&lt;/em&gt; for the place they are visiting. An example of this may be information on an influential demolished building that used to exist at a certain location, or more information on a district of the city (optional, default to false)
     * @param bool $social_media Enabling this includes images from Instagram in the output results. This is disabled by default, since these images are often just pictures of people or food, which often have little relevance to the actual location (optional, default to false)
     * @param string $image_size The size of the images you&#39;d like to see in the response (optional, default to MEDIUM)
     * @param int $number_of_images Number of images to display (optional, default to 4)
     * @param int $number_of_results The maximum number of points of interest to return in the results set. This is a range from 1 to 100 (optional, default to 20)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PointsOfInterestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function yapQCityNameSearchWithHttpInfo($apikey, $city_name, $lang = 'EN', $category = 'Museum', $geonames = 'false', $vibes = 'false', $social_media = 'false', $image_size = 'MEDIUM', $number_of_images = '4', $number_of_results = '20')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling yapQCityNameSearch');
        }
        // verify the required parameter 'city_name' is set
        if ($city_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city_name when calling yapQCityNameSearch');
        }
        // parse inputs
        $resourcePath = "/points-of-interest/yapq-search-text";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($city_name !== null) {
            $queryParams['city_name'] = $this->apiClient->getSerializer()->toQueryValue($city_name);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($geonames !== null) {
            $queryParams['geonames'] = $this->apiClient->getSerializer()->toQueryValue($geonames);
        }
        // query params
        if ($vibes !== null) {
            $queryParams['vibes'] = $this->apiClient->getSerializer()->toQueryValue($vibes);
        }
        // query params
        if ($social_media !== null) {
            $queryParams['social_media'] = $this->apiClient->getSerializer()->toQueryValue($social_media);
        }
        // query params
        if ($image_size !== null) {
            $queryParams['image_size'] = $this->apiClient->getSerializer()->toQueryValue($image_size);
        }
        // query params
        if ($number_of_images !== null) {
            $queryParams['number_of_images'] = $this->apiClient->getSerializer()->toQueryValue($number_of_images);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PointsOfInterestResponse',
                '/points-of-interest/yapq-search-text'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PointsOfInterestResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PointsOfInterestResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation yapQGeosearch
     *
     * YapQ Geosearch - Find landmarks and attractions near a given point.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param float $latitude Latitude of the center of the search, in decimal degrees (required)
     * @param float $longitude Longitude of the center of the search, in decimal degrees (required)
     * @param int $radius Radius around the center to look for points-of-interest around the given latitude and longitude in kilometers (km) (required)
     * @param string $lang The preferred language of the content related to each point of interest. Content will be returned in this language if available (optional, default to EN)
     * @param string $category Filters the resulting points_of_interest to include only results which have a least one category containing the given provided word. Good examples are &lt;em&gt;museum&lt;/em&gt;, &lt;em&gt;landmark&lt;/em&gt; or &lt;em&gt;church&lt;/em&gt; (optional, default to Museum)
     * @param bool $geonames Setting this to true includes only points of interest with a geonames ID (optional, default to false)
     * @param bool $vibes Includes content that doesn&#39;t correspond to an active physical place, but which gives the user some background information, or &lt;em&gt;vibe&lt;/em&gt; for the place they are visiting. An example of this may be information on an influential demolished building that used to exist at a certain location, or more information on a district of the city (optional, default to false)
     * @param bool $social_media Enabling this includes images from Instagram in the output results. This is disabled by default, since these images are often just pictures of people or food, which often have little relevance to the actual location (optional, default to false)
     * @param string $image_size The size of the images you&#39;d like to see in the response (optional, default to MEDIUM)
     * @param int $number_of_images Number of images to display. (optional, default to 4)
     * @param int $number_of_results The maximum number of points of interest to return in the results set. This is a range from 1 to 100 (optional, default to 20)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PointsOfInterestResponse
     */
    public function yapQGeosearch($apikey, $latitude, $longitude, $radius, $lang = 'EN', $category = 'Museum', $geonames = 'false', $vibes = 'false', $social_media = 'false', $image_size = 'MEDIUM', $number_of_images = '4', $number_of_results = '20')
    {
        list($response) = $this->yapQGeosearchWithHttpInfo($apikey, $latitude, $longitude, $radius, $lang, $category, $geonames, $vibes, $social_media, $image_size, $number_of_images, $number_of_results);
        return $response;
    }

    /**
     * Operation yapQGeosearchWithHttpInfo
     *
     * YapQ Geosearch - Find landmarks and attractions near a given point.
     *
     * @param string $apikey API Key provided for your account, to identify you for API access. Make sure to keep this API key secret. (required)
     * @param float $latitude Latitude of the center of the search, in decimal degrees (required)
     * @param float $longitude Longitude of the center of the search, in decimal degrees (required)
     * @param int $radius Radius around the center to look for points-of-interest around the given latitude and longitude in kilometers (km) (required)
     * @param string $lang The preferred language of the content related to each point of interest. Content will be returned in this language if available (optional, default to EN)
     * @param string $category Filters the resulting points_of_interest to include only results which have a least one category containing the given provided word. Good examples are &lt;em&gt;museum&lt;/em&gt;, &lt;em&gt;landmark&lt;/em&gt; or &lt;em&gt;church&lt;/em&gt; (optional, default to Museum)
     * @param bool $geonames Setting this to true includes only points of interest with a geonames ID (optional, default to false)
     * @param bool $vibes Includes content that doesn&#39;t correspond to an active physical place, but which gives the user some background information, or &lt;em&gt;vibe&lt;/em&gt; for the place they are visiting. An example of this may be information on an influential demolished building that used to exist at a certain location, or more information on a district of the city (optional, default to false)
     * @param bool $social_media Enabling this includes images from Instagram in the output results. This is disabled by default, since these images are often just pictures of people or food, which often have little relevance to the actual location (optional, default to false)
     * @param string $image_size The size of the images you&#39;d like to see in the response (optional, default to MEDIUM)
     * @param int $number_of_images Number of images to display. (optional, default to 4)
     * @param int $number_of_results The maximum number of points of interest to return in the results set. This is a range from 1 to 100 (optional, default to 20)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PointsOfInterestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function yapQGeosearchWithHttpInfo($apikey, $latitude, $longitude, $radius, $lang = 'EN', $category = 'Museum', $geonames = 'false', $vibes = 'false', $social_media = 'false', $image_size = 'MEDIUM', $number_of_images = '4', $number_of_results = '20')
    {
        // verify the required parameter 'apikey' is set
        if ($apikey === null) {
            throw new \InvalidArgumentException('Missing the required parameter $apikey when calling yapQGeosearch');
        }
        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling yapQGeosearch');
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling yapQGeosearch');
        }
        // verify the required parameter 'radius' is set
        if ($radius === null) {
            throw new \InvalidArgumentException('Missing the required parameter $radius when calling yapQGeosearch');
        }
        // parse inputs
        $resourcePath = "/points-of-interest/yapq-search-circle";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($geonames !== null) {
            $queryParams['geonames'] = $this->apiClient->getSerializer()->toQueryValue($geonames);
        }
        // query params
        if ($vibes !== null) {
            $queryParams['vibes'] = $this->apiClient->getSerializer()->toQueryValue($vibes);
        }
        // query params
        if ($social_media !== null) {
            $queryParams['social_media'] = $this->apiClient->getSerializer()->toQueryValue($social_media);
        }
        // query params
        if ($image_size !== null) {
            $queryParams['image_size'] = $this->apiClient->getSerializer()->toQueryValue($image_size);
        }
        // query params
        if ($number_of_images !== null) {
            $queryParams['number_of_images'] = $this->apiClient->getSerializer()->toQueryValue($number_of_images);
        }
        // query params
        if ($number_of_results !== null) {
            $queryParams['number_of_results'] = $this->apiClient->getSerializer()->toQueryValue($number_of_results);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PointsOfInterestResponse',
                '/points-of-interest/yapq-search-circle'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PointsOfInterestResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PointsOfInterestResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
